// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pdeguing/empire-and-foundation/ent/planet"
	"github.com/pdeguing/empire-and-foundation/ent/timer"
	"github.com/pdeguing/empire-and-foundation/ent/user"
)

// PlanetCreate is the builder for creating a Planet entity.
type PlanetCreate struct {
	config
	mutation *PlanetMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (pc *PlanetCreate) SetCreatedAt(t time.Time) *PlanetCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (pc *PlanetCreate) SetNillableCreatedAt(t *time.Time) *PlanetCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the updated_at field.
func (pc *PlanetCreate) SetUpdatedAt(t time.Time) *PlanetCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (pc *PlanetCreate) SetNillableUpdatedAt(t *time.Time) *PlanetCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetMetal sets the metal field.
func (pc *PlanetCreate) SetMetal(i int64) *PlanetCreate {
	pc.mutation.SetMetal(i)
	return pc
}

// SetNillableMetal sets the metal field if the given value is not nil.
func (pc *PlanetCreate) SetNillableMetal(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetMetal(*i)
	}
	return pc
}

// SetMetalProdLevel sets the metal_prod_level field.
func (pc *PlanetCreate) SetMetalProdLevel(i int) *PlanetCreate {
	pc.mutation.SetMetalProdLevel(i)
	return pc
}

// SetNillableMetalProdLevel sets the metal_prod_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillableMetalProdLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetMetalProdLevel(*i)
	}
	return pc
}

// SetMetalStorageLevel sets the metal_storage_level field.
func (pc *PlanetCreate) SetMetalStorageLevel(i int) *PlanetCreate {
	pc.mutation.SetMetalStorageLevel(i)
	return pc
}

// SetNillableMetalStorageLevel sets the metal_storage_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillableMetalStorageLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetMetalStorageLevel(*i)
	}
	return pc
}

// SetHydrogen sets the hydrogen field.
func (pc *PlanetCreate) SetHydrogen(i int64) *PlanetCreate {
	pc.mutation.SetHydrogen(i)
	return pc
}

// SetNillableHydrogen sets the hydrogen field if the given value is not nil.
func (pc *PlanetCreate) SetNillableHydrogen(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetHydrogen(*i)
	}
	return pc
}

// SetHydrogenProdLevel sets the hydrogen_prod_level field.
func (pc *PlanetCreate) SetHydrogenProdLevel(i int) *PlanetCreate {
	pc.mutation.SetHydrogenProdLevel(i)
	return pc
}

// SetNillableHydrogenProdLevel sets the hydrogen_prod_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillableHydrogenProdLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetHydrogenProdLevel(*i)
	}
	return pc
}

// SetHydrogenStorageLevel sets the hydrogen_storage_level field.
func (pc *PlanetCreate) SetHydrogenStorageLevel(i int) *PlanetCreate {
	pc.mutation.SetHydrogenStorageLevel(i)
	return pc
}

// SetNillableHydrogenStorageLevel sets the hydrogen_storage_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillableHydrogenStorageLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetHydrogenStorageLevel(*i)
	}
	return pc
}

// SetSilica sets the silica field.
func (pc *PlanetCreate) SetSilica(i int64) *PlanetCreate {
	pc.mutation.SetSilica(i)
	return pc
}

// SetNillableSilica sets the silica field if the given value is not nil.
func (pc *PlanetCreate) SetNillableSilica(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetSilica(*i)
	}
	return pc
}

// SetSilicaProdLevel sets the silica_prod_level field.
func (pc *PlanetCreate) SetSilicaProdLevel(i int) *PlanetCreate {
	pc.mutation.SetSilicaProdLevel(i)
	return pc
}

// SetNillableSilicaProdLevel sets the silica_prod_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillableSilicaProdLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetSilicaProdLevel(*i)
	}
	return pc
}

// SetSilicaStorageLevel sets the silica_storage_level field.
func (pc *PlanetCreate) SetSilicaStorageLevel(i int) *PlanetCreate {
	pc.mutation.SetSilicaStorageLevel(i)
	return pc
}

// SetNillableSilicaStorageLevel sets the silica_storage_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillableSilicaStorageLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetSilicaStorageLevel(*i)
	}
	return pc
}

// SetPopulation sets the population field.
func (pc *PlanetCreate) SetPopulation(i int64) *PlanetCreate {
	pc.mutation.SetPopulation(i)
	return pc
}

// SetNillablePopulation sets the population field if the given value is not nil.
func (pc *PlanetCreate) SetNillablePopulation(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetPopulation(*i)
	}
	return pc
}

// SetPopulationProdLevel sets the population_prod_level field.
func (pc *PlanetCreate) SetPopulationProdLevel(i int) *PlanetCreate {
	pc.mutation.SetPopulationProdLevel(i)
	return pc
}

// SetNillablePopulationProdLevel sets the population_prod_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillablePopulationProdLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetPopulationProdLevel(*i)
	}
	return pc
}

// SetPopulationStorageLevel sets the population_storage_level field.
func (pc *PlanetCreate) SetPopulationStorageLevel(i int) *PlanetCreate {
	pc.mutation.SetPopulationStorageLevel(i)
	return pc
}

// SetNillablePopulationStorageLevel sets the population_storage_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillablePopulationStorageLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetPopulationStorageLevel(*i)
	}
	return pc
}

// SetSolarProdLevel sets the solar_prod_level field.
func (pc *PlanetCreate) SetSolarProdLevel(i int) *PlanetCreate {
	pc.mutation.SetSolarProdLevel(i)
	return pc
}

// SetNillableSolarProdLevel sets the solar_prod_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillableSolarProdLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetSolarProdLevel(*i)
	}
	return pc
}

// SetShipFactoryLevel sets the ship_factory_level field.
func (pc *PlanetCreate) SetShipFactoryLevel(i int) *PlanetCreate {
	pc.mutation.SetShipFactoryLevel(i)
	return pc
}

// SetNillableShipFactoryLevel sets the ship_factory_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillableShipFactoryLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetShipFactoryLevel(*i)
	}
	return pc
}

// SetResearchCenterLevel sets the research_center_level field.
func (pc *PlanetCreate) SetResearchCenterLevel(i int) *PlanetCreate {
	pc.mutation.SetResearchCenterLevel(i)
	return pc
}

// SetNillableResearchCenterLevel sets the research_center_level field if the given value is not nil.
func (pc *PlanetCreate) SetNillableResearchCenterLevel(i *int) *PlanetCreate {
	if i != nil {
		pc.SetResearchCenterLevel(*i)
	}
	return pc
}

// SetRegionCode sets the region_code field.
func (pc *PlanetCreate) SetRegionCode(i int) *PlanetCreate {
	pc.mutation.SetRegionCode(i)
	return pc
}

// SetSystemCode sets the system_code field.
func (pc *PlanetCreate) SetSystemCode(i int) *PlanetCreate {
	pc.mutation.SetSystemCode(i)
	return pc
}

// SetOrbitCode sets the orbit_code field.
func (pc *PlanetCreate) SetOrbitCode(i int) *PlanetCreate {
	pc.mutation.SetOrbitCode(i)
	return pc
}

// SetSuborbitCode sets the suborbit_code field.
func (pc *PlanetCreate) SetSuborbitCode(i int) *PlanetCreate {
	pc.mutation.SetSuborbitCode(i)
	return pc
}

// SetPositionCode sets the position_code field.
func (pc *PlanetCreate) SetPositionCode(i int) *PlanetCreate {
	pc.mutation.SetPositionCode(i)
	return pc
}

// SetNumCaravel sets the num_caravel field.
func (pc *PlanetCreate) SetNumCaravel(i int64) *PlanetCreate {
	pc.mutation.SetNumCaravel(i)
	return pc
}

// SetNillableNumCaravel sets the num_caravel field if the given value is not nil.
func (pc *PlanetCreate) SetNillableNumCaravel(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetNumCaravel(*i)
	}
	return pc
}

// SetNumLightFighter sets the num_light_fighter field.
func (pc *PlanetCreate) SetNumLightFighter(i int64) *PlanetCreate {
	pc.mutation.SetNumLightFighter(i)
	return pc
}

// SetNillableNumLightFighter sets the num_light_fighter field if the given value is not nil.
func (pc *PlanetCreate) SetNillableNumLightFighter(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetNumLightFighter(*i)
	}
	return pc
}

// SetNumCorvette sets the num_corvette field.
func (pc *PlanetCreate) SetNumCorvette(i int64) *PlanetCreate {
	pc.mutation.SetNumCorvette(i)
	return pc
}

// SetNillableNumCorvette sets the num_corvette field if the given value is not nil.
func (pc *PlanetCreate) SetNillableNumCorvette(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetNumCorvette(*i)
	}
	return pc
}

// SetNumFrigate sets the num_frigate field.
func (pc *PlanetCreate) SetNumFrigate(i int64) *PlanetCreate {
	pc.mutation.SetNumFrigate(i)
	return pc
}

// SetNillableNumFrigate sets the num_frigate field if the given value is not nil.
func (pc *PlanetCreate) SetNillableNumFrigate(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetNumFrigate(*i)
	}
	return pc
}

// SetNumProbe sets the num_probe field.
func (pc *PlanetCreate) SetNumProbe(i int64) *PlanetCreate {
	pc.mutation.SetNumProbe(i)
	return pc
}

// SetNillableNumProbe sets the num_probe field if the given value is not nil.
func (pc *PlanetCreate) SetNillableNumProbe(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetNumProbe(*i)
	}
	return pc
}

// SetNumSmallCargo sets the num_small_cargo field.
func (pc *PlanetCreate) SetNumSmallCargo(i int64) *PlanetCreate {
	pc.mutation.SetNumSmallCargo(i)
	return pc
}

// SetNillableNumSmallCargo sets the num_small_cargo field if the given value is not nil.
func (pc *PlanetCreate) SetNillableNumSmallCargo(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetNumSmallCargo(*i)
	}
	return pc
}

// SetNumMediumCargo sets the num_medium_cargo field.
func (pc *PlanetCreate) SetNumMediumCargo(i int64) *PlanetCreate {
	pc.mutation.SetNumMediumCargo(i)
	return pc
}

// SetNillableNumMediumCargo sets the num_medium_cargo field if the given value is not nil.
func (pc *PlanetCreate) SetNillableNumMediumCargo(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetNumMediumCargo(*i)
	}
	return pc
}

// SetNumColonizationArk sets the num_colonization_ark field.
func (pc *PlanetCreate) SetNumColonizationArk(i int64) *PlanetCreate {
	pc.mutation.SetNumColonizationArk(i)
	return pc
}

// SetNillableNumColonizationArk sets the num_colonization_ark field if the given value is not nil.
func (pc *PlanetCreate) SetNillableNumColonizationArk(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetNumColonizationArk(*i)
	}
	return pc
}

// SetName sets the name field.
func (pc *PlanetCreate) SetName(s string) *PlanetCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the name field if the given value is not nil.
func (pc *PlanetCreate) SetNillableName(s *string) *PlanetCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetPlanetType sets the planet_type field.
func (pc *PlanetCreate) SetPlanetType(pt planet.PlanetType) *PlanetCreate {
	pc.mutation.SetPlanetType(pt)
	return pc
}

// SetPlanetSkin sets the planet_skin field.
func (pc *PlanetCreate) SetPlanetSkin(s string) *PlanetCreate {
	pc.mutation.SetPlanetSkin(s)
	return pc
}

// SetLastResourceUpdate sets the last_resource_update field.
func (pc *PlanetCreate) SetLastResourceUpdate(t time.Time) *PlanetCreate {
	pc.mutation.SetLastResourceUpdate(t)
	return pc
}

// SetNillableLastResourceUpdate sets the last_resource_update field if the given value is not nil.
func (pc *PlanetCreate) SetNillableLastResourceUpdate(t *time.Time) *PlanetCreate {
	if t != nil {
		pc.SetLastResourceUpdate(*t)
	}
	return pc
}

// SetOwnerID sets the owner edge to User by id.
func (pc *PlanetCreate) SetOwnerID(id int) *PlanetCreate {
	pc.mutation.SetOwnerID(id)
	return pc
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (pc *PlanetCreate) SetNillableOwnerID(id *int) *PlanetCreate {
	if id != nil {
		pc = pc.SetOwnerID(*id)
	}
	return pc
}

// SetOwner sets the owner edge to User.
func (pc *PlanetCreate) SetOwner(u *User) *PlanetCreate {
	return pc.SetOwnerID(u.ID)
}

// AddTimerIDs adds the timers edge to Timer by ids.
func (pc *PlanetCreate) AddTimerIDs(ids ...int) *PlanetCreate {
	pc.mutation.AddTimerIDs(ids...)
	return pc
}

// AddTimers adds the timers edges to Timer.
func (pc *PlanetCreate) AddTimers(t ...*Timer) *PlanetCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTimerIDs(ids...)
}

// Save creates the Planet in the database.
func (pc *PlanetCreate) Save(ctx context.Context) (*Planet, error) {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := planet.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := planet.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Metal(); !ok {
		v := planet.DefaultMetal
		pc.mutation.SetMetal(v)
	}
	if v, ok := pc.mutation.Metal(); ok {
		if err := planet.MetalValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"metal\": %v", err)
		}
	}
	if _, ok := pc.mutation.MetalProdLevel(); !ok {
		v := planet.DefaultMetalProdLevel
		pc.mutation.SetMetalProdLevel(v)
	}
	if v, ok := pc.mutation.MetalProdLevel(); ok {
		if err := planet.MetalProdLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"metal_prod_level\": %v", err)
		}
	}
	if _, ok := pc.mutation.MetalStorageLevel(); !ok {
		v := planet.DefaultMetalStorageLevel
		pc.mutation.SetMetalStorageLevel(v)
	}
	if v, ok := pc.mutation.MetalStorageLevel(); ok {
		if err := planet.MetalStorageLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"metal_storage_level\": %v", err)
		}
	}
	if _, ok := pc.mutation.Hydrogen(); !ok {
		v := planet.DefaultHydrogen
		pc.mutation.SetHydrogen(v)
	}
	if v, ok := pc.mutation.Hydrogen(); ok {
		if err := planet.HydrogenValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"hydrogen\": %v", err)
		}
	}
	if _, ok := pc.mutation.HydrogenProdLevel(); !ok {
		v := planet.DefaultHydrogenProdLevel
		pc.mutation.SetHydrogenProdLevel(v)
	}
	if v, ok := pc.mutation.HydrogenProdLevel(); ok {
		if err := planet.HydrogenProdLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"hydrogen_prod_level\": %v", err)
		}
	}
	if _, ok := pc.mutation.HydrogenStorageLevel(); !ok {
		v := planet.DefaultHydrogenStorageLevel
		pc.mutation.SetHydrogenStorageLevel(v)
	}
	if v, ok := pc.mutation.HydrogenStorageLevel(); ok {
		if err := planet.HydrogenStorageLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"hydrogen_storage_level\": %v", err)
		}
	}
	if _, ok := pc.mutation.Silica(); !ok {
		v := planet.DefaultSilica
		pc.mutation.SetSilica(v)
	}
	if v, ok := pc.mutation.Silica(); ok {
		if err := planet.SilicaValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"silica\": %v", err)
		}
	}
	if _, ok := pc.mutation.SilicaProdLevel(); !ok {
		v := planet.DefaultSilicaProdLevel
		pc.mutation.SetSilicaProdLevel(v)
	}
	if v, ok := pc.mutation.SilicaProdLevel(); ok {
		if err := planet.SilicaProdLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"silica_prod_level\": %v", err)
		}
	}
	if _, ok := pc.mutation.SilicaStorageLevel(); !ok {
		v := planet.DefaultSilicaStorageLevel
		pc.mutation.SetSilicaStorageLevel(v)
	}
	if v, ok := pc.mutation.SilicaStorageLevel(); ok {
		if err := planet.SilicaStorageLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"silica_storage_level\": %v", err)
		}
	}
	if _, ok := pc.mutation.Population(); !ok {
		v := planet.DefaultPopulation
		pc.mutation.SetPopulation(v)
	}
	if v, ok := pc.mutation.Population(); ok {
		if err := planet.PopulationValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"population\": %v", err)
		}
	}
	if _, ok := pc.mutation.PopulationProdLevel(); !ok {
		v := planet.DefaultPopulationProdLevel
		pc.mutation.SetPopulationProdLevel(v)
	}
	if v, ok := pc.mutation.PopulationProdLevel(); ok {
		if err := planet.PopulationProdLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"population_prod_level\": %v", err)
		}
	}
	if _, ok := pc.mutation.PopulationStorageLevel(); !ok {
		v := planet.DefaultPopulationStorageLevel
		pc.mutation.SetPopulationStorageLevel(v)
	}
	if v, ok := pc.mutation.PopulationStorageLevel(); ok {
		if err := planet.PopulationStorageLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"population_storage_level\": %v", err)
		}
	}
	if _, ok := pc.mutation.SolarProdLevel(); !ok {
		v := planet.DefaultSolarProdLevel
		pc.mutation.SetSolarProdLevel(v)
	}
	if v, ok := pc.mutation.SolarProdLevel(); ok {
		if err := planet.SolarProdLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"solar_prod_level\": %v", err)
		}
	}
	if _, ok := pc.mutation.ShipFactoryLevel(); !ok {
		v := planet.DefaultShipFactoryLevel
		pc.mutation.SetShipFactoryLevel(v)
	}
	if v, ok := pc.mutation.ShipFactoryLevel(); ok {
		if err := planet.ShipFactoryLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"ship_factory_level\": %v", err)
		}
	}
	if _, ok := pc.mutation.ResearchCenterLevel(); !ok {
		v := planet.DefaultResearchCenterLevel
		pc.mutation.SetResearchCenterLevel(v)
	}
	if v, ok := pc.mutation.ResearchCenterLevel(); ok {
		if err := planet.ResearchCenterLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"research_center_level\": %v", err)
		}
	}
	if _, ok := pc.mutation.RegionCode(); !ok {
		return nil, errors.New("ent: missing required field \"region_code\"")
	}
	if v, ok := pc.mutation.RegionCode(); ok {
		if err := planet.RegionCodeValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"region_code\": %v", err)
		}
	}
	if _, ok := pc.mutation.SystemCode(); !ok {
		return nil, errors.New("ent: missing required field \"system_code\"")
	}
	if v, ok := pc.mutation.SystemCode(); ok {
		if err := planet.SystemCodeValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"system_code\": %v", err)
		}
	}
	if _, ok := pc.mutation.OrbitCode(); !ok {
		return nil, errors.New("ent: missing required field \"orbit_code\"")
	}
	if v, ok := pc.mutation.OrbitCode(); ok {
		if err := planet.OrbitCodeValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"orbit_code\": %v", err)
		}
	}
	if _, ok := pc.mutation.SuborbitCode(); !ok {
		return nil, errors.New("ent: missing required field \"suborbit_code\"")
	}
	if v, ok := pc.mutation.SuborbitCode(); ok {
		if err := planet.SuborbitCodeValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"suborbit_code\": %v", err)
		}
	}
	if _, ok := pc.mutation.PositionCode(); !ok {
		return nil, errors.New("ent: missing required field \"position_code\"")
	}
	if v, ok := pc.mutation.PositionCode(); ok {
		if err := planet.PositionCodeValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"position_code\": %v", err)
		}
	}
	if _, ok := pc.mutation.NumCaravel(); !ok {
		v := planet.DefaultNumCaravel
		pc.mutation.SetNumCaravel(v)
	}
	if v, ok := pc.mutation.NumCaravel(); ok {
		if err := planet.NumCaravelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"num_caravel\": %v", err)
		}
	}
	if _, ok := pc.mutation.NumLightFighter(); !ok {
		v := planet.DefaultNumLightFighter
		pc.mutation.SetNumLightFighter(v)
	}
	if v, ok := pc.mutation.NumLightFighter(); ok {
		if err := planet.NumLightFighterValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"num_light_fighter\": %v", err)
		}
	}
	if _, ok := pc.mutation.NumCorvette(); !ok {
		v := planet.DefaultNumCorvette
		pc.mutation.SetNumCorvette(v)
	}
	if v, ok := pc.mutation.NumCorvette(); ok {
		if err := planet.NumCorvetteValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"num_corvette\": %v", err)
		}
	}
	if _, ok := pc.mutation.NumFrigate(); !ok {
		v := planet.DefaultNumFrigate
		pc.mutation.SetNumFrigate(v)
	}
	if v, ok := pc.mutation.NumFrigate(); ok {
		if err := planet.NumFrigateValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"num_frigate\": %v", err)
		}
	}
	if _, ok := pc.mutation.NumProbe(); !ok {
		v := planet.DefaultNumProbe
		pc.mutation.SetNumProbe(v)
	}
	if v, ok := pc.mutation.NumProbe(); ok {
		if err := planet.NumProbeValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"num_probe\": %v", err)
		}
	}
	if _, ok := pc.mutation.NumSmallCargo(); !ok {
		v := planet.DefaultNumSmallCargo
		pc.mutation.SetNumSmallCargo(v)
	}
	if v, ok := pc.mutation.NumSmallCargo(); ok {
		if err := planet.NumSmallCargoValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"num_small_cargo\": %v", err)
		}
	}
	if _, ok := pc.mutation.NumMediumCargo(); !ok {
		v := planet.DefaultNumMediumCargo
		pc.mutation.SetNumMediumCargo(v)
	}
	if v, ok := pc.mutation.NumMediumCargo(); ok {
		if err := planet.NumMediumCargoValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"num_medium_cargo\": %v", err)
		}
	}
	if _, ok := pc.mutation.NumColonizationArk(); !ok {
		v := planet.DefaultNumColonizationArk
		pc.mutation.SetNumColonizationArk(v)
	}
	if v, ok := pc.mutation.NumColonizationArk(); ok {
		if err := planet.NumColonizationArkValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"num_colonization_ark\": %v", err)
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		v := planet.DefaultName
		pc.mutation.SetName(v)
	}
	if _, ok := pc.mutation.PlanetType(); !ok {
		return nil, errors.New("ent: missing required field \"planet_type\"")
	}
	if v, ok := pc.mutation.PlanetType(); ok {
		if err := planet.PlanetTypeValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"planet_type\": %v", err)
		}
	}
	if _, ok := pc.mutation.PlanetSkin(); !ok {
		return nil, errors.New("ent: missing required field \"planet_skin\"")
	}
	if _, ok := pc.mutation.LastResourceUpdate(); !ok {
		v := planet.DefaultLastResourceUpdate()
		pc.mutation.SetLastResourceUpdate(v)
	}
	var (
		err  error
		node *Planet
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlanetCreate) SaveX(ctx context.Context) *Planet {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PlanetCreate) sqlSave(ctx context.Context) (*Planet, error) {
	var (
		pl    = &Planet{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: planet.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: planet.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: planet.FieldCreatedAt,
		})
		pl.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: planet.FieldUpdatedAt,
		})
		pl.UpdatedAt = value
	}
	if value, ok := pc.mutation.Metal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldMetal,
		})
		pl.Metal = value
	}
	if value, ok := pc.mutation.MetalProdLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldMetalProdLevel,
		})
		pl.MetalProdLevel = value
	}
	if value, ok := pc.mutation.MetalStorageLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldMetalStorageLevel,
		})
		pl.MetalStorageLevel = value
	}
	if value, ok := pc.mutation.Hydrogen(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldHydrogen,
		})
		pl.Hydrogen = value
	}
	if value, ok := pc.mutation.HydrogenProdLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldHydrogenProdLevel,
		})
		pl.HydrogenProdLevel = value
	}
	if value, ok := pc.mutation.HydrogenStorageLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldHydrogenStorageLevel,
		})
		pl.HydrogenStorageLevel = value
	}
	if value, ok := pc.mutation.Silica(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldSilica,
		})
		pl.Silica = value
	}
	if value, ok := pc.mutation.SilicaProdLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSilicaProdLevel,
		})
		pl.SilicaProdLevel = value
	}
	if value, ok := pc.mutation.SilicaStorageLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSilicaStorageLevel,
		})
		pl.SilicaStorageLevel = value
	}
	if value, ok := pc.mutation.Population(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldPopulation,
		})
		pl.Population = value
	}
	if value, ok := pc.mutation.PopulationProdLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldPopulationProdLevel,
		})
		pl.PopulationProdLevel = value
	}
	if value, ok := pc.mutation.PopulationStorageLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldPopulationStorageLevel,
		})
		pl.PopulationStorageLevel = value
	}
	if value, ok := pc.mutation.SolarProdLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSolarProdLevel,
		})
		pl.SolarProdLevel = value
	}
	if value, ok := pc.mutation.ShipFactoryLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldShipFactoryLevel,
		})
		pl.ShipFactoryLevel = value
	}
	if value, ok := pc.mutation.ResearchCenterLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldResearchCenterLevel,
		})
		pl.ResearchCenterLevel = value
	}
	if value, ok := pc.mutation.RegionCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldRegionCode,
		})
		pl.RegionCode = value
	}
	if value, ok := pc.mutation.SystemCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSystemCode,
		})
		pl.SystemCode = value
	}
	if value, ok := pc.mutation.OrbitCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldOrbitCode,
		})
		pl.OrbitCode = value
	}
	if value, ok := pc.mutation.SuborbitCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSuborbitCode,
		})
		pl.SuborbitCode = value
	}
	if value, ok := pc.mutation.PositionCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldPositionCode,
		})
		pl.PositionCode = value
	}
	if value, ok := pc.mutation.NumCaravel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldNumCaravel,
		})
		pl.NumCaravel = value
	}
	if value, ok := pc.mutation.NumLightFighter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldNumLightFighter,
		})
		pl.NumLightFighter = value
	}
	if value, ok := pc.mutation.NumCorvette(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldNumCorvette,
		})
		pl.NumCorvette = value
	}
	if value, ok := pc.mutation.NumFrigate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldNumFrigate,
		})
		pl.NumFrigate = value
	}
	if value, ok := pc.mutation.NumProbe(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldNumProbe,
		})
		pl.NumProbe = value
	}
	if value, ok := pc.mutation.NumSmallCargo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldNumSmallCargo,
		})
		pl.NumSmallCargo = value
	}
	if value, ok := pc.mutation.NumMediumCargo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldNumMediumCargo,
		})
		pl.NumMediumCargo = value
	}
	if value, ok := pc.mutation.NumColonizationArk(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldNumColonizationArk,
		})
		pl.NumColonizationArk = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldName,
		})
		pl.Name = value
	}
	if value, ok := pc.mutation.PlanetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: planet.FieldPlanetType,
		})
		pl.PlanetType = value
	}
	if value, ok := pc.mutation.PlanetSkin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldPlanetSkin,
		})
		pl.PlanetSkin = value
	}
	if value, ok := pc.mutation.LastResourceUpdate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: planet.FieldLastResourceUpdate,
		})
		pl.LastResourceUpdate = value
	}
	if nodes := pc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planet.OwnerTable,
			Columns: []string{planet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TimersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   planet.TimersTable,
			Columns: []string{planet.TimersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: timer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pl.ID = int(id)
	return pl, nil
}
