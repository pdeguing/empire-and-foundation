// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pdeguing/empire-and-foundation/ent/planet"
)

// PlanetCreate is the builder for creating a Planet entity.
type PlanetCreate struct {
	config
	created_at        *time.Time
	updated_at        *time.Time
	metal_stock       *int64
	metal_mine        *int
	last_metal_update *time.Time
	owner             map[int]struct{}
}

// SetCreatedAt sets the created_at field.
func (pc *PlanetCreate) SetCreatedAt(t time.Time) *PlanetCreate {
	pc.created_at = &t
	return pc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (pc *PlanetCreate) SetNillableCreatedAt(t *time.Time) *PlanetCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the updated_at field.
func (pc *PlanetCreate) SetUpdatedAt(t time.Time) *PlanetCreate {
	pc.updated_at = &t
	return pc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (pc *PlanetCreate) SetNillableUpdatedAt(t *time.Time) *PlanetCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetMetalStock sets the metal_stock field.
func (pc *PlanetCreate) SetMetalStock(i int64) *PlanetCreate {
	pc.metal_stock = &i
	return pc
}

// SetNillableMetalStock sets the metal_stock field if the given value is not nil.
func (pc *PlanetCreate) SetNillableMetalStock(i *int64) *PlanetCreate {
	if i != nil {
		pc.SetMetalStock(*i)
	}
	return pc
}

// SetMetalMine sets the metal_mine field.
func (pc *PlanetCreate) SetMetalMine(i int) *PlanetCreate {
	pc.metal_mine = &i
	return pc
}

// SetNillableMetalMine sets the metal_mine field if the given value is not nil.
func (pc *PlanetCreate) SetNillableMetalMine(i *int) *PlanetCreate {
	if i != nil {
		pc.SetMetalMine(*i)
	}
	return pc
}

// SetLastMetalUpdate sets the last_metal_update field.
func (pc *PlanetCreate) SetLastMetalUpdate(t time.Time) *PlanetCreate {
	pc.last_metal_update = &t
	return pc
}

// SetNillableLastMetalUpdate sets the last_metal_update field if the given value is not nil.
func (pc *PlanetCreate) SetNillableLastMetalUpdate(t *time.Time) *PlanetCreate {
	if t != nil {
		pc.SetLastMetalUpdate(*t)
	}
	return pc
}

// SetOwnerID sets the owner edge to User by id.
func (pc *PlanetCreate) SetOwnerID(id int) *PlanetCreate {
	if pc.owner == nil {
		pc.owner = make(map[int]struct{})
	}
	pc.owner[id] = struct{}{}
	return pc
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (pc *PlanetCreate) SetNillableOwnerID(id *int) *PlanetCreate {
	if id != nil {
		pc = pc.SetOwnerID(*id)
	}
	return pc
}

// SetOwner sets the owner edge to User.
func (pc *PlanetCreate) SetOwner(u *User) *PlanetCreate {
	return pc.SetOwnerID(u.ID)
}

// Save creates the Planet in the database.
func (pc *PlanetCreate) Save(ctx context.Context) (*Planet, error) {
	if pc.created_at == nil {
		v := planet.DefaultCreatedAt()
		pc.created_at = &v
	}
	if pc.updated_at == nil {
		v := planet.DefaultUpdatedAt()
		pc.updated_at = &v
	}
	if pc.metal_stock == nil {
		v := planet.DefaultMetalStock
		pc.metal_stock = &v
	}
	if err := planet.MetalStockValidator(*pc.metal_stock); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"metal_stock\": %v", err)
	}
	if pc.metal_mine == nil {
		v := planet.DefaultMetalMine
		pc.metal_mine = &v
	}
	if err := planet.MetalMineValidator(*pc.metal_mine); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"metal_mine\": %v", err)
	}
	if pc.last_metal_update == nil {
		v := planet.DefaultLastMetalUpdate()
		pc.last_metal_update = &v
	}
	if len(pc.owner) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"owner\"")
	}
	return pc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlanetCreate) SaveX(ctx context.Context) *Planet {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PlanetCreate) sqlSave(ctx context.Context) (*Planet, error) {
	var (
		res     sql.Result
		builder = sql.Dialect(pc.driver.Dialect())
		pl      = &Planet{config: pc.config}
	)
	tx, err := pc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	insert := builder.Insert(planet.Table).Default()
	if value := pc.created_at; value != nil {
		insert.Set(planet.FieldCreatedAt, *value)
		pl.CreatedAt = *value
	}
	if value := pc.updated_at; value != nil {
		insert.Set(planet.FieldUpdatedAt, *value)
		pl.UpdatedAt = *value
	}
	if value := pc.metal_stock; value != nil {
		insert.Set(planet.FieldMetalStock, *value)
		pl.MetalStock = *value
	}
	if value := pc.metal_mine; value != nil {
		insert.Set(planet.FieldMetalMine, *value)
		pl.MetalMine = *value
	}
	if value := pc.last_metal_update; value != nil {
		insert.Set(planet.FieldLastMetalUpdate, *value)
		pl.LastMetalUpdate = *value
	}

	id, err := insertLastID(ctx, tx, insert.Returning(planet.FieldID))
	if err != nil {
		return nil, rollback(tx, err)
	}
	pl.ID = int(id)
	if len(pc.owner) > 0 {
		for eid := range pc.owner {
			query, args := builder.Update(planet.OwnerTable).
				Set(planet.OwnerColumn, eid).
				Where(sql.EQ(planet.FieldID, id)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return pl, nil
}
