// Code generated by entc, DO NOT EDIT.

package planet

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/pdeguing/empire-and-foundation/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Metal applies equality check predicate on the "metal" field. It's identical to MetalEQ.
func Metal(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMetal), v))
	})
}

// MetalProdLevel applies equality check predicate on the "metal_prod_level" field. It's identical to MetalProdLevelEQ.
func MetalProdLevel(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMetalProdLevel), v))
	})
}

// MetalStorageLevel applies equality check predicate on the "metal_storage_level" field. It's identical to MetalStorageLevelEQ.
func MetalStorageLevel(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMetalStorageLevel), v))
	})
}

// Hydrogen applies equality check predicate on the "hydrogen" field. It's identical to HydrogenEQ.
func Hydrogen(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHydrogen), v))
	})
}

// HydrogenProdLevel applies equality check predicate on the "hydrogen_prod_level" field. It's identical to HydrogenProdLevelEQ.
func HydrogenProdLevel(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHydrogenProdLevel), v))
	})
}

// HydrogenStorageLevel applies equality check predicate on the "hydrogen_storage_level" field. It's identical to HydrogenStorageLevelEQ.
func HydrogenStorageLevel(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHydrogenStorageLevel), v))
	})
}

// Silica applies equality check predicate on the "silica" field. It's identical to SilicaEQ.
func Silica(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSilica), v))
	})
}

// SilicaProdLevel applies equality check predicate on the "silica_prod_level" field. It's identical to SilicaProdLevelEQ.
func SilicaProdLevel(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSilicaProdLevel), v))
	})
}

// SilicaStorageLevel applies equality check predicate on the "silica_storage_level" field. It's identical to SilicaStorageLevelEQ.
func SilicaStorageLevel(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSilicaStorageLevel), v))
	})
}

// Population applies equality check predicate on the "population" field. It's identical to PopulationEQ.
func Population(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPopulation), v))
	})
}

// PopulationProdLevel applies equality check predicate on the "population_prod_level" field. It's identical to PopulationProdLevelEQ.
func PopulationProdLevel(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPopulationProdLevel), v))
	})
}

// PopulationStorageLevel applies equality check predicate on the "population_storage_level" field. It's identical to PopulationStorageLevelEQ.
func PopulationStorageLevel(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPopulationStorageLevel), v))
	})
}

// SolarProdLevel applies equality check predicate on the "solar_prod_level" field. It's identical to SolarProdLevelEQ.
func SolarProdLevel(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSolarProdLevel), v))
	})
}

// ShipFactoryLevel applies equality check predicate on the "ship_factory_level" field. It's identical to ShipFactoryLevelEQ.
func ShipFactoryLevel(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipFactoryLevel), v))
	})
}

// ResearchCenterLevel applies equality check predicate on the "research_center_level" field. It's identical to ResearchCenterLevelEQ.
func ResearchCenterLevel(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResearchCenterLevel), v))
	})
}

// RegionCode applies equality check predicate on the "region_code" field. It's identical to RegionCodeEQ.
func RegionCode(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegionCode), v))
	})
}

// SystemCode applies equality check predicate on the "system_code" field. It's identical to SystemCodeEQ.
func SystemCode(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSystemCode), v))
	})
}

// OrbitCode applies equality check predicate on the "orbit_code" field. It's identical to OrbitCodeEQ.
func OrbitCode(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrbitCode), v))
	})
}

// SuborbitCode applies equality check predicate on the "suborbit_code" field. It's identical to SuborbitCodeEQ.
func SuborbitCode(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuborbitCode), v))
	})
}

// PositionCode applies equality check predicate on the "position_code" field. It's identical to PositionCodeEQ.
func PositionCode(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPositionCode), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// PlanetSkin applies equality check predicate on the "planet_skin" field. It's identical to PlanetSkinEQ.
func PlanetSkin(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlanetSkin), v))
	})
}

// LastResourceUpdate applies equality check predicate on the "last_resource_update" field. It's identical to LastResourceUpdateEQ.
func LastResourceUpdate(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastResourceUpdate), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// MetalEQ applies the EQ predicate on the "metal" field.
func MetalEQ(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMetal), v))
	})
}

// MetalNEQ applies the NEQ predicate on the "metal" field.
func MetalNEQ(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMetal), v))
	})
}

// MetalIn applies the In predicate on the "metal" field.
func MetalIn(vs ...int64) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMetal), v...))
	})
}

// MetalNotIn applies the NotIn predicate on the "metal" field.
func MetalNotIn(vs ...int64) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMetal), v...))
	})
}

// MetalGT applies the GT predicate on the "metal" field.
func MetalGT(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMetal), v))
	})
}

// MetalGTE applies the GTE predicate on the "metal" field.
func MetalGTE(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMetal), v))
	})
}

// MetalLT applies the LT predicate on the "metal" field.
func MetalLT(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMetal), v))
	})
}

// MetalLTE applies the LTE predicate on the "metal" field.
func MetalLTE(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMetal), v))
	})
}

// MetalProdLevelEQ applies the EQ predicate on the "metal_prod_level" field.
func MetalProdLevelEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMetalProdLevel), v))
	})
}

// MetalProdLevelNEQ applies the NEQ predicate on the "metal_prod_level" field.
func MetalProdLevelNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMetalProdLevel), v))
	})
}

// MetalProdLevelIn applies the In predicate on the "metal_prod_level" field.
func MetalProdLevelIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMetalProdLevel), v...))
	})
}

// MetalProdLevelNotIn applies the NotIn predicate on the "metal_prod_level" field.
func MetalProdLevelNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMetalProdLevel), v...))
	})
}

// MetalProdLevelGT applies the GT predicate on the "metal_prod_level" field.
func MetalProdLevelGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMetalProdLevel), v))
	})
}

// MetalProdLevelGTE applies the GTE predicate on the "metal_prod_level" field.
func MetalProdLevelGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMetalProdLevel), v))
	})
}

// MetalProdLevelLT applies the LT predicate on the "metal_prod_level" field.
func MetalProdLevelLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMetalProdLevel), v))
	})
}

// MetalProdLevelLTE applies the LTE predicate on the "metal_prod_level" field.
func MetalProdLevelLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMetalProdLevel), v))
	})
}

// MetalStorageLevelEQ applies the EQ predicate on the "metal_storage_level" field.
func MetalStorageLevelEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMetalStorageLevel), v))
	})
}

// MetalStorageLevelNEQ applies the NEQ predicate on the "metal_storage_level" field.
func MetalStorageLevelNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMetalStorageLevel), v))
	})
}

// MetalStorageLevelIn applies the In predicate on the "metal_storage_level" field.
func MetalStorageLevelIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMetalStorageLevel), v...))
	})
}

// MetalStorageLevelNotIn applies the NotIn predicate on the "metal_storage_level" field.
func MetalStorageLevelNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMetalStorageLevel), v...))
	})
}

// MetalStorageLevelGT applies the GT predicate on the "metal_storage_level" field.
func MetalStorageLevelGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMetalStorageLevel), v))
	})
}

// MetalStorageLevelGTE applies the GTE predicate on the "metal_storage_level" field.
func MetalStorageLevelGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMetalStorageLevel), v))
	})
}

// MetalStorageLevelLT applies the LT predicate on the "metal_storage_level" field.
func MetalStorageLevelLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMetalStorageLevel), v))
	})
}

// MetalStorageLevelLTE applies the LTE predicate on the "metal_storage_level" field.
func MetalStorageLevelLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMetalStorageLevel), v))
	})
}

// HydrogenEQ applies the EQ predicate on the "hydrogen" field.
func HydrogenEQ(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHydrogen), v))
	})
}

// HydrogenNEQ applies the NEQ predicate on the "hydrogen" field.
func HydrogenNEQ(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHydrogen), v))
	})
}

// HydrogenIn applies the In predicate on the "hydrogen" field.
func HydrogenIn(vs ...int64) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHydrogen), v...))
	})
}

// HydrogenNotIn applies the NotIn predicate on the "hydrogen" field.
func HydrogenNotIn(vs ...int64) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHydrogen), v...))
	})
}

// HydrogenGT applies the GT predicate on the "hydrogen" field.
func HydrogenGT(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHydrogen), v))
	})
}

// HydrogenGTE applies the GTE predicate on the "hydrogen" field.
func HydrogenGTE(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHydrogen), v))
	})
}

// HydrogenLT applies the LT predicate on the "hydrogen" field.
func HydrogenLT(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHydrogen), v))
	})
}

// HydrogenLTE applies the LTE predicate on the "hydrogen" field.
func HydrogenLTE(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHydrogen), v))
	})
}

// HydrogenProdLevelEQ applies the EQ predicate on the "hydrogen_prod_level" field.
func HydrogenProdLevelEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHydrogenProdLevel), v))
	})
}

// HydrogenProdLevelNEQ applies the NEQ predicate on the "hydrogen_prod_level" field.
func HydrogenProdLevelNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHydrogenProdLevel), v))
	})
}

// HydrogenProdLevelIn applies the In predicate on the "hydrogen_prod_level" field.
func HydrogenProdLevelIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHydrogenProdLevel), v...))
	})
}

// HydrogenProdLevelNotIn applies the NotIn predicate on the "hydrogen_prod_level" field.
func HydrogenProdLevelNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHydrogenProdLevel), v...))
	})
}

// HydrogenProdLevelGT applies the GT predicate on the "hydrogen_prod_level" field.
func HydrogenProdLevelGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHydrogenProdLevel), v))
	})
}

// HydrogenProdLevelGTE applies the GTE predicate on the "hydrogen_prod_level" field.
func HydrogenProdLevelGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHydrogenProdLevel), v))
	})
}

// HydrogenProdLevelLT applies the LT predicate on the "hydrogen_prod_level" field.
func HydrogenProdLevelLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHydrogenProdLevel), v))
	})
}

// HydrogenProdLevelLTE applies the LTE predicate on the "hydrogen_prod_level" field.
func HydrogenProdLevelLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHydrogenProdLevel), v))
	})
}

// HydrogenStorageLevelEQ applies the EQ predicate on the "hydrogen_storage_level" field.
func HydrogenStorageLevelEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHydrogenStorageLevel), v))
	})
}

// HydrogenStorageLevelNEQ applies the NEQ predicate on the "hydrogen_storage_level" field.
func HydrogenStorageLevelNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHydrogenStorageLevel), v))
	})
}

// HydrogenStorageLevelIn applies the In predicate on the "hydrogen_storage_level" field.
func HydrogenStorageLevelIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHydrogenStorageLevel), v...))
	})
}

// HydrogenStorageLevelNotIn applies the NotIn predicate on the "hydrogen_storage_level" field.
func HydrogenStorageLevelNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHydrogenStorageLevel), v...))
	})
}

// HydrogenStorageLevelGT applies the GT predicate on the "hydrogen_storage_level" field.
func HydrogenStorageLevelGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHydrogenStorageLevel), v))
	})
}

// HydrogenStorageLevelGTE applies the GTE predicate on the "hydrogen_storage_level" field.
func HydrogenStorageLevelGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHydrogenStorageLevel), v))
	})
}

// HydrogenStorageLevelLT applies the LT predicate on the "hydrogen_storage_level" field.
func HydrogenStorageLevelLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHydrogenStorageLevel), v))
	})
}

// HydrogenStorageLevelLTE applies the LTE predicate on the "hydrogen_storage_level" field.
func HydrogenStorageLevelLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHydrogenStorageLevel), v))
	})
}

// SilicaEQ applies the EQ predicate on the "silica" field.
func SilicaEQ(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSilica), v))
	})
}

// SilicaNEQ applies the NEQ predicate on the "silica" field.
func SilicaNEQ(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSilica), v))
	})
}

// SilicaIn applies the In predicate on the "silica" field.
func SilicaIn(vs ...int64) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSilica), v...))
	})
}

// SilicaNotIn applies the NotIn predicate on the "silica" field.
func SilicaNotIn(vs ...int64) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSilica), v...))
	})
}

// SilicaGT applies the GT predicate on the "silica" field.
func SilicaGT(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSilica), v))
	})
}

// SilicaGTE applies the GTE predicate on the "silica" field.
func SilicaGTE(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSilica), v))
	})
}

// SilicaLT applies the LT predicate on the "silica" field.
func SilicaLT(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSilica), v))
	})
}

// SilicaLTE applies the LTE predicate on the "silica" field.
func SilicaLTE(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSilica), v))
	})
}

// SilicaProdLevelEQ applies the EQ predicate on the "silica_prod_level" field.
func SilicaProdLevelEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSilicaProdLevel), v))
	})
}

// SilicaProdLevelNEQ applies the NEQ predicate on the "silica_prod_level" field.
func SilicaProdLevelNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSilicaProdLevel), v))
	})
}

// SilicaProdLevelIn applies the In predicate on the "silica_prod_level" field.
func SilicaProdLevelIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSilicaProdLevel), v...))
	})
}

// SilicaProdLevelNotIn applies the NotIn predicate on the "silica_prod_level" field.
func SilicaProdLevelNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSilicaProdLevel), v...))
	})
}

// SilicaProdLevelGT applies the GT predicate on the "silica_prod_level" field.
func SilicaProdLevelGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSilicaProdLevel), v))
	})
}

// SilicaProdLevelGTE applies the GTE predicate on the "silica_prod_level" field.
func SilicaProdLevelGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSilicaProdLevel), v))
	})
}

// SilicaProdLevelLT applies the LT predicate on the "silica_prod_level" field.
func SilicaProdLevelLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSilicaProdLevel), v))
	})
}

// SilicaProdLevelLTE applies the LTE predicate on the "silica_prod_level" field.
func SilicaProdLevelLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSilicaProdLevel), v))
	})
}

// SilicaStorageLevelEQ applies the EQ predicate on the "silica_storage_level" field.
func SilicaStorageLevelEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSilicaStorageLevel), v))
	})
}

// SilicaStorageLevelNEQ applies the NEQ predicate on the "silica_storage_level" field.
func SilicaStorageLevelNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSilicaStorageLevel), v))
	})
}

// SilicaStorageLevelIn applies the In predicate on the "silica_storage_level" field.
func SilicaStorageLevelIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSilicaStorageLevel), v...))
	})
}

// SilicaStorageLevelNotIn applies the NotIn predicate on the "silica_storage_level" field.
func SilicaStorageLevelNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSilicaStorageLevel), v...))
	})
}

// SilicaStorageLevelGT applies the GT predicate on the "silica_storage_level" field.
func SilicaStorageLevelGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSilicaStorageLevel), v))
	})
}

// SilicaStorageLevelGTE applies the GTE predicate on the "silica_storage_level" field.
func SilicaStorageLevelGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSilicaStorageLevel), v))
	})
}

// SilicaStorageLevelLT applies the LT predicate on the "silica_storage_level" field.
func SilicaStorageLevelLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSilicaStorageLevel), v))
	})
}

// SilicaStorageLevelLTE applies the LTE predicate on the "silica_storage_level" field.
func SilicaStorageLevelLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSilicaStorageLevel), v))
	})
}

// PopulationEQ applies the EQ predicate on the "population" field.
func PopulationEQ(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPopulation), v))
	})
}

// PopulationNEQ applies the NEQ predicate on the "population" field.
func PopulationNEQ(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPopulation), v))
	})
}

// PopulationIn applies the In predicate on the "population" field.
func PopulationIn(vs ...int64) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPopulation), v...))
	})
}

// PopulationNotIn applies the NotIn predicate on the "population" field.
func PopulationNotIn(vs ...int64) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPopulation), v...))
	})
}

// PopulationGT applies the GT predicate on the "population" field.
func PopulationGT(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPopulation), v))
	})
}

// PopulationGTE applies the GTE predicate on the "population" field.
func PopulationGTE(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPopulation), v))
	})
}

// PopulationLT applies the LT predicate on the "population" field.
func PopulationLT(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPopulation), v))
	})
}

// PopulationLTE applies the LTE predicate on the "population" field.
func PopulationLTE(v int64) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPopulation), v))
	})
}

// PopulationProdLevelEQ applies the EQ predicate on the "population_prod_level" field.
func PopulationProdLevelEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPopulationProdLevel), v))
	})
}

// PopulationProdLevelNEQ applies the NEQ predicate on the "population_prod_level" field.
func PopulationProdLevelNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPopulationProdLevel), v))
	})
}

// PopulationProdLevelIn applies the In predicate on the "population_prod_level" field.
func PopulationProdLevelIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPopulationProdLevel), v...))
	})
}

// PopulationProdLevelNotIn applies the NotIn predicate on the "population_prod_level" field.
func PopulationProdLevelNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPopulationProdLevel), v...))
	})
}

// PopulationProdLevelGT applies the GT predicate on the "population_prod_level" field.
func PopulationProdLevelGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPopulationProdLevel), v))
	})
}

// PopulationProdLevelGTE applies the GTE predicate on the "population_prod_level" field.
func PopulationProdLevelGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPopulationProdLevel), v))
	})
}

// PopulationProdLevelLT applies the LT predicate on the "population_prod_level" field.
func PopulationProdLevelLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPopulationProdLevel), v))
	})
}

// PopulationProdLevelLTE applies the LTE predicate on the "population_prod_level" field.
func PopulationProdLevelLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPopulationProdLevel), v))
	})
}

// PopulationStorageLevelEQ applies the EQ predicate on the "population_storage_level" field.
func PopulationStorageLevelEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPopulationStorageLevel), v))
	})
}

// PopulationStorageLevelNEQ applies the NEQ predicate on the "population_storage_level" field.
func PopulationStorageLevelNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPopulationStorageLevel), v))
	})
}

// PopulationStorageLevelIn applies the In predicate on the "population_storage_level" field.
func PopulationStorageLevelIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPopulationStorageLevel), v...))
	})
}

// PopulationStorageLevelNotIn applies the NotIn predicate on the "population_storage_level" field.
func PopulationStorageLevelNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPopulationStorageLevel), v...))
	})
}

// PopulationStorageLevelGT applies the GT predicate on the "population_storage_level" field.
func PopulationStorageLevelGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPopulationStorageLevel), v))
	})
}

// PopulationStorageLevelGTE applies the GTE predicate on the "population_storage_level" field.
func PopulationStorageLevelGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPopulationStorageLevel), v))
	})
}

// PopulationStorageLevelLT applies the LT predicate on the "population_storage_level" field.
func PopulationStorageLevelLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPopulationStorageLevel), v))
	})
}

// PopulationStorageLevelLTE applies the LTE predicate on the "population_storage_level" field.
func PopulationStorageLevelLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPopulationStorageLevel), v))
	})
}

// SolarProdLevelEQ applies the EQ predicate on the "solar_prod_level" field.
func SolarProdLevelEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSolarProdLevel), v))
	})
}

// SolarProdLevelNEQ applies the NEQ predicate on the "solar_prod_level" field.
func SolarProdLevelNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSolarProdLevel), v))
	})
}

// SolarProdLevelIn applies the In predicate on the "solar_prod_level" field.
func SolarProdLevelIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSolarProdLevel), v...))
	})
}

// SolarProdLevelNotIn applies the NotIn predicate on the "solar_prod_level" field.
func SolarProdLevelNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSolarProdLevel), v...))
	})
}

// SolarProdLevelGT applies the GT predicate on the "solar_prod_level" field.
func SolarProdLevelGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSolarProdLevel), v))
	})
}

// SolarProdLevelGTE applies the GTE predicate on the "solar_prod_level" field.
func SolarProdLevelGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSolarProdLevel), v))
	})
}

// SolarProdLevelLT applies the LT predicate on the "solar_prod_level" field.
func SolarProdLevelLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSolarProdLevel), v))
	})
}

// SolarProdLevelLTE applies the LTE predicate on the "solar_prod_level" field.
func SolarProdLevelLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSolarProdLevel), v))
	})
}

// ShipFactoryLevelEQ applies the EQ predicate on the "ship_factory_level" field.
func ShipFactoryLevelEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipFactoryLevel), v))
	})
}

// ShipFactoryLevelNEQ applies the NEQ predicate on the "ship_factory_level" field.
func ShipFactoryLevelNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipFactoryLevel), v))
	})
}

// ShipFactoryLevelIn applies the In predicate on the "ship_factory_level" field.
func ShipFactoryLevelIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShipFactoryLevel), v...))
	})
}

// ShipFactoryLevelNotIn applies the NotIn predicate on the "ship_factory_level" field.
func ShipFactoryLevelNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShipFactoryLevel), v...))
	})
}

// ShipFactoryLevelGT applies the GT predicate on the "ship_factory_level" field.
func ShipFactoryLevelGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipFactoryLevel), v))
	})
}

// ShipFactoryLevelGTE applies the GTE predicate on the "ship_factory_level" field.
func ShipFactoryLevelGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipFactoryLevel), v))
	})
}

// ShipFactoryLevelLT applies the LT predicate on the "ship_factory_level" field.
func ShipFactoryLevelLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipFactoryLevel), v))
	})
}

// ShipFactoryLevelLTE applies the LTE predicate on the "ship_factory_level" field.
func ShipFactoryLevelLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipFactoryLevel), v))
	})
}

// ResearchCenterLevelEQ applies the EQ predicate on the "research_center_level" field.
func ResearchCenterLevelEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResearchCenterLevel), v))
	})
}

// ResearchCenterLevelNEQ applies the NEQ predicate on the "research_center_level" field.
func ResearchCenterLevelNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResearchCenterLevel), v))
	})
}

// ResearchCenterLevelIn applies the In predicate on the "research_center_level" field.
func ResearchCenterLevelIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResearchCenterLevel), v...))
	})
}

// ResearchCenterLevelNotIn applies the NotIn predicate on the "research_center_level" field.
func ResearchCenterLevelNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResearchCenterLevel), v...))
	})
}

// ResearchCenterLevelGT applies the GT predicate on the "research_center_level" field.
func ResearchCenterLevelGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResearchCenterLevel), v))
	})
}

// ResearchCenterLevelGTE applies the GTE predicate on the "research_center_level" field.
func ResearchCenterLevelGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResearchCenterLevel), v))
	})
}

// ResearchCenterLevelLT applies the LT predicate on the "research_center_level" field.
func ResearchCenterLevelLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResearchCenterLevel), v))
	})
}

// ResearchCenterLevelLTE applies the LTE predicate on the "research_center_level" field.
func ResearchCenterLevelLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResearchCenterLevel), v))
	})
}

// RegionCodeEQ applies the EQ predicate on the "region_code" field.
func RegionCodeEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegionCode), v))
	})
}

// RegionCodeNEQ applies the NEQ predicate on the "region_code" field.
func RegionCodeNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegionCode), v))
	})
}

// RegionCodeIn applies the In predicate on the "region_code" field.
func RegionCodeIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegionCode), v...))
	})
}

// RegionCodeNotIn applies the NotIn predicate on the "region_code" field.
func RegionCodeNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegionCode), v...))
	})
}

// RegionCodeGT applies the GT predicate on the "region_code" field.
func RegionCodeGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegionCode), v))
	})
}

// RegionCodeGTE applies the GTE predicate on the "region_code" field.
func RegionCodeGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegionCode), v))
	})
}

// RegionCodeLT applies the LT predicate on the "region_code" field.
func RegionCodeLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegionCode), v))
	})
}

// RegionCodeLTE applies the LTE predicate on the "region_code" field.
func RegionCodeLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegionCode), v))
	})
}

// SystemCodeEQ applies the EQ predicate on the "system_code" field.
func SystemCodeEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSystemCode), v))
	})
}

// SystemCodeNEQ applies the NEQ predicate on the "system_code" field.
func SystemCodeNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSystemCode), v))
	})
}

// SystemCodeIn applies the In predicate on the "system_code" field.
func SystemCodeIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSystemCode), v...))
	})
}

// SystemCodeNotIn applies the NotIn predicate on the "system_code" field.
func SystemCodeNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSystemCode), v...))
	})
}

// SystemCodeGT applies the GT predicate on the "system_code" field.
func SystemCodeGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSystemCode), v))
	})
}

// SystemCodeGTE applies the GTE predicate on the "system_code" field.
func SystemCodeGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSystemCode), v))
	})
}

// SystemCodeLT applies the LT predicate on the "system_code" field.
func SystemCodeLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSystemCode), v))
	})
}

// SystemCodeLTE applies the LTE predicate on the "system_code" field.
func SystemCodeLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSystemCode), v))
	})
}

// OrbitCodeEQ applies the EQ predicate on the "orbit_code" field.
func OrbitCodeEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrbitCode), v))
	})
}

// OrbitCodeNEQ applies the NEQ predicate on the "orbit_code" field.
func OrbitCodeNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrbitCode), v))
	})
}

// OrbitCodeIn applies the In predicate on the "orbit_code" field.
func OrbitCodeIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrbitCode), v...))
	})
}

// OrbitCodeNotIn applies the NotIn predicate on the "orbit_code" field.
func OrbitCodeNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrbitCode), v...))
	})
}

// OrbitCodeGT applies the GT predicate on the "orbit_code" field.
func OrbitCodeGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrbitCode), v))
	})
}

// OrbitCodeGTE applies the GTE predicate on the "orbit_code" field.
func OrbitCodeGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrbitCode), v))
	})
}

// OrbitCodeLT applies the LT predicate on the "orbit_code" field.
func OrbitCodeLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrbitCode), v))
	})
}

// OrbitCodeLTE applies the LTE predicate on the "orbit_code" field.
func OrbitCodeLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrbitCode), v))
	})
}

// SuborbitCodeEQ applies the EQ predicate on the "suborbit_code" field.
func SuborbitCodeEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuborbitCode), v))
	})
}

// SuborbitCodeNEQ applies the NEQ predicate on the "suborbit_code" field.
func SuborbitCodeNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSuborbitCode), v))
	})
}

// SuborbitCodeIn applies the In predicate on the "suborbit_code" field.
func SuborbitCodeIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSuborbitCode), v...))
	})
}

// SuborbitCodeNotIn applies the NotIn predicate on the "suborbit_code" field.
func SuborbitCodeNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSuborbitCode), v...))
	})
}

// SuborbitCodeGT applies the GT predicate on the "suborbit_code" field.
func SuborbitCodeGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSuborbitCode), v))
	})
}

// SuborbitCodeGTE applies the GTE predicate on the "suborbit_code" field.
func SuborbitCodeGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSuborbitCode), v))
	})
}

// SuborbitCodeLT applies the LT predicate on the "suborbit_code" field.
func SuborbitCodeLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSuborbitCode), v))
	})
}

// SuborbitCodeLTE applies the LTE predicate on the "suborbit_code" field.
func SuborbitCodeLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSuborbitCode), v))
	})
}

// PositionCodeEQ applies the EQ predicate on the "position_code" field.
func PositionCodeEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPositionCode), v))
	})
}

// PositionCodeNEQ applies the NEQ predicate on the "position_code" field.
func PositionCodeNEQ(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPositionCode), v))
	})
}

// PositionCodeIn applies the In predicate on the "position_code" field.
func PositionCodeIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPositionCode), v...))
	})
}

// PositionCodeNotIn applies the NotIn predicate on the "position_code" field.
func PositionCodeNotIn(vs ...int) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPositionCode), v...))
	})
}

// PositionCodeGT applies the GT predicate on the "position_code" field.
func PositionCodeGT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPositionCode), v))
	})
}

// PositionCodeGTE applies the GTE predicate on the "position_code" field.
func PositionCodeGTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPositionCode), v))
	})
}

// PositionCodeLT applies the LT predicate on the "position_code" field.
func PositionCodeLT(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPositionCode), v))
	})
}

// PositionCodeLTE applies the LTE predicate on the "position_code" field.
func PositionCodeLTE(v int) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPositionCode), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// PlanetTypeEQ applies the EQ predicate on the "planet_type" field.
func PlanetTypeEQ(v PlanetType) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlanetType), v))
	})
}

// PlanetTypeNEQ applies the NEQ predicate on the "planet_type" field.
func PlanetTypeNEQ(v PlanetType) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlanetType), v))
	})
}

// PlanetTypeIn applies the In predicate on the "planet_type" field.
func PlanetTypeIn(vs ...PlanetType) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlanetType), v...))
	})
}

// PlanetTypeNotIn applies the NotIn predicate on the "planet_type" field.
func PlanetTypeNotIn(vs ...PlanetType) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlanetType), v...))
	})
}

// PlanetSkinEQ applies the EQ predicate on the "planet_skin" field.
func PlanetSkinEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlanetSkin), v))
	})
}

// PlanetSkinNEQ applies the NEQ predicate on the "planet_skin" field.
func PlanetSkinNEQ(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlanetSkin), v))
	})
}

// PlanetSkinIn applies the In predicate on the "planet_skin" field.
func PlanetSkinIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlanetSkin), v...))
	})
}

// PlanetSkinNotIn applies the NotIn predicate on the "planet_skin" field.
func PlanetSkinNotIn(vs ...string) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlanetSkin), v...))
	})
}

// PlanetSkinGT applies the GT predicate on the "planet_skin" field.
func PlanetSkinGT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlanetSkin), v))
	})
}

// PlanetSkinGTE applies the GTE predicate on the "planet_skin" field.
func PlanetSkinGTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlanetSkin), v))
	})
}

// PlanetSkinLT applies the LT predicate on the "planet_skin" field.
func PlanetSkinLT(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlanetSkin), v))
	})
}

// PlanetSkinLTE applies the LTE predicate on the "planet_skin" field.
func PlanetSkinLTE(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlanetSkin), v))
	})
}

// PlanetSkinContains applies the Contains predicate on the "planet_skin" field.
func PlanetSkinContains(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlanetSkin), v))
	})
}

// PlanetSkinHasPrefix applies the HasPrefix predicate on the "planet_skin" field.
func PlanetSkinHasPrefix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlanetSkin), v))
	})
}

// PlanetSkinHasSuffix applies the HasSuffix predicate on the "planet_skin" field.
func PlanetSkinHasSuffix(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlanetSkin), v))
	})
}

// PlanetSkinEqualFold applies the EqualFold predicate on the "planet_skin" field.
func PlanetSkinEqualFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlanetSkin), v))
	})
}

// PlanetSkinContainsFold applies the ContainsFold predicate on the "planet_skin" field.
func PlanetSkinContainsFold(v string) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlanetSkin), v))
	})
}

// LastResourceUpdateEQ applies the EQ predicate on the "last_resource_update" field.
func LastResourceUpdateEQ(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastResourceUpdate), v))
	})
}

// LastResourceUpdateNEQ applies the NEQ predicate on the "last_resource_update" field.
func LastResourceUpdateNEQ(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastResourceUpdate), v))
	})
}

// LastResourceUpdateIn applies the In predicate on the "last_resource_update" field.
func LastResourceUpdateIn(vs ...time.Time) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastResourceUpdate), v...))
	})
}

// LastResourceUpdateNotIn applies the NotIn predicate on the "last_resource_update" field.
func LastResourceUpdateNotIn(vs ...time.Time) predicate.Planet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Planet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastResourceUpdate), v...))
	})
}

// LastResourceUpdateGT applies the GT predicate on the "last_resource_update" field.
func LastResourceUpdateGT(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastResourceUpdate), v))
	})
}

// LastResourceUpdateGTE applies the GTE predicate on the "last_resource_update" field.
func LastResourceUpdateGTE(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastResourceUpdate), v))
	})
}

// LastResourceUpdateLT applies the LT predicate on the "last_resource_update" field.
func LastResourceUpdateLT(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastResourceUpdate), v))
	})
}

// LastResourceUpdateLTE applies the LTE predicate on the "last_resource_update" field.
func LastResourceUpdateLTE(v time.Time) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastResourceUpdate), v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTimers applies the HasEdge predicate on the "timers" edge.
func HasTimers() predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TimersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TimersTable, TimersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTimersWith applies the HasEdge predicate on the "timers" edge with a given conditions (other predicates).
func HasTimersWith(preds ...predicate.Timer) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TimersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TimersTable, TimersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Planet) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Planet) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Planet) predicate.Planet {
	return predicate.Planet(func(s *sql.Selector) {
		p(s.Not())
	})
}
