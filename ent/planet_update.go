// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pdeguing/empire-and-foundation/ent/planet"
	"github.com/pdeguing/empire-and-foundation/ent/predicate"
	"github.com/pdeguing/empire-and-foundation/ent/user"
)

// PlanetUpdate is the builder for updating Planet entities.
type PlanetUpdate struct {
	config

	updated_at        *time.Time
	metal_stock       *int64
	addmetal_stock    *int64
	metal_mine        *int
	addmetal_mine     *int
	last_metal_update *time.Time
	owner             map[int]struct{}
	clearedOwner      bool
	predicates        []predicate.Planet
}

// Where adds a new predicate for the builder.
func (pu *PlanetUpdate) Where(ps ...predicate.Planet) *PlanetUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetUpdatedAt sets the updated_at field.
func (pu *PlanetUpdate) SetUpdatedAt(t time.Time) *PlanetUpdate {
	pu.updated_at = &t
	return pu
}

// SetMetalStock sets the metal_stock field.
func (pu *PlanetUpdate) SetMetalStock(i int64) *PlanetUpdate {
	pu.metal_stock = &i
	pu.addmetal_stock = nil
	return pu
}

// SetNillableMetalStock sets the metal_stock field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableMetalStock(i *int64) *PlanetUpdate {
	if i != nil {
		pu.SetMetalStock(*i)
	}
	return pu
}

// AddMetalStock adds i to metal_stock.
func (pu *PlanetUpdate) AddMetalStock(i int64) *PlanetUpdate {
	if pu.addmetal_stock == nil {
		pu.addmetal_stock = &i
	} else {
		*pu.addmetal_stock += i
	}
	return pu
}

// SetMetalMine sets the metal_mine field.
func (pu *PlanetUpdate) SetMetalMine(i int) *PlanetUpdate {
	pu.metal_mine = &i
	pu.addmetal_mine = nil
	return pu
}

// SetNillableMetalMine sets the metal_mine field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableMetalMine(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetMetalMine(*i)
	}
	return pu
}

// AddMetalMine adds i to metal_mine.
func (pu *PlanetUpdate) AddMetalMine(i int) *PlanetUpdate {
	if pu.addmetal_mine == nil {
		pu.addmetal_mine = &i
	} else {
		*pu.addmetal_mine += i
	}
	return pu
}

// SetLastMetalUpdate sets the last_metal_update field.
func (pu *PlanetUpdate) SetLastMetalUpdate(t time.Time) *PlanetUpdate {
	pu.last_metal_update = &t
	return pu
}

// SetNillableLastMetalUpdate sets the last_metal_update field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableLastMetalUpdate(t *time.Time) *PlanetUpdate {
	if t != nil {
		pu.SetLastMetalUpdate(*t)
	}
	return pu
}

// SetOwnerID sets the owner edge to User by id.
func (pu *PlanetUpdate) SetOwnerID(id int) *PlanetUpdate {
	if pu.owner == nil {
		pu.owner = make(map[int]struct{})
	}
	pu.owner[id] = struct{}{}
	return pu
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (pu *PlanetUpdate) SetNillableOwnerID(id *int) *PlanetUpdate {
	if id != nil {
		pu = pu.SetOwnerID(*id)
	}
	return pu
}

// SetOwner sets the owner edge to User.
func (pu *PlanetUpdate) SetOwner(u *User) *PlanetUpdate {
	return pu.SetOwnerID(u.ID)
}

// ClearOwner clears the owner edge to User.
func (pu *PlanetUpdate) ClearOwner() *PlanetUpdate {
	pu.clearedOwner = true
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PlanetUpdate) Save(ctx context.Context) (int, error) {
	if pu.updated_at == nil {
		v := planet.UpdateDefaultUpdatedAt()
		pu.updated_at = &v
	}
	if pu.metal_stock != nil {
		if err := planet.MetalStockValidator(*pu.metal_stock); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"metal_stock\": %v", err)
		}
	}
	if pu.metal_mine != nil {
		if err := planet.MetalMineValidator(*pu.metal_mine); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"metal_mine\": %v", err)
		}
	}
	if len(pu.owner) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"owner\"")
	}
	return pu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlanetUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlanetUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlanetUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlanetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	var (
		builder  = sql.Dialect(pu.driver.Dialect())
		selector = builder.Select(planet.FieldID).From(builder.Table(planet.Table))
	)
	for _, p := range pu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = pu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := pu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		updater = builder.Update(planet.Table)
	)
	updater = updater.Where(sql.InInts(planet.FieldID, ids...))
	if value := pu.updated_at; value != nil {
		updater.Set(planet.FieldUpdatedAt, *value)
	}
	if value := pu.metal_stock; value != nil {
		updater.Set(planet.FieldMetalStock, *value)
	}
	if value := pu.addmetal_stock; value != nil {
		updater.Add(planet.FieldMetalStock, *value)
	}
	if value := pu.metal_mine; value != nil {
		updater.Set(planet.FieldMetalMine, *value)
	}
	if value := pu.addmetal_mine; value != nil {
		updater.Add(planet.FieldMetalMine, *value)
	}
	if value := pu.last_metal_update; value != nil {
		updater.Set(planet.FieldLastMetalUpdate, *value)
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if pu.clearedOwner {
		query, args := builder.Update(planet.OwnerTable).
			SetNull(planet.OwnerColumn).
			Where(sql.InInts(user.FieldID, ids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(pu.owner) > 0 {
		for eid := range pu.owner {
			query, args := builder.Update(planet.OwnerTable).
				Set(planet.OwnerColumn, eid).
				Where(sql.InInts(planet.FieldID, ids...)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return 0, rollback(tx, err)
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// PlanetUpdateOne is the builder for updating a single Planet entity.
type PlanetUpdateOne struct {
	config
	id int

	updated_at        *time.Time
	metal_stock       *int64
	addmetal_stock    *int64
	metal_mine        *int
	addmetal_mine     *int
	last_metal_update *time.Time
	owner             map[int]struct{}
	clearedOwner      bool
}

// SetUpdatedAt sets the updated_at field.
func (puo *PlanetUpdateOne) SetUpdatedAt(t time.Time) *PlanetUpdateOne {
	puo.updated_at = &t
	return puo
}

// SetMetalStock sets the metal_stock field.
func (puo *PlanetUpdateOne) SetMetalStock(i int64) *PlanetUpdateOne {
	puo.metal_stock = &i
	puo.addmetal_stock = nil
	return puo
}

// SetNillableMetalStock sets the metal_stock field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableMetalStock(i *int64) *PlanetUpdateOne {
	if i != nil {
		puo.SetMetalStock(*i)
	}
	return puo
}

// AddMetalStock adds i to metal_stock.
func (puo *PlanetUpdateOne) AddMetalStock(i int64) *PlanetUpdateOne {
	if puo.addmetal_stock == nil {
		puo.addmetal_stock = &i
	} else {
		*puo.addmetal_stock += i
	}
	return puo
}

// SetMetalMine sets the metal_mine field.
func (puo *PlanetUpdateOne) SetMetalMine(i int) *PlanetUpdateOne {
	puo.metal_mine = &i
	puo.addmetal_mine = nil
	return puo
}

// SetNillableMetalMine sets the metal_mine field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableMetalMine(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetMetalMine(*i)
	}
	return puo
}

// AddMetalMine adds i to metal_mine.
func (puo *PlanetUpdateOne) AddMetalMine(i int) *PlanetUpdateOne {
	if puo.addmetal_mine == nil {
		puo.addmetal_mine = &i
	} else {
		*puo.addmetal_mine += i
	}
	return puo
}

// SetLastMetalUpdate sets the last_metal_update field.
func (puo *PlanetUpdateOne) SetLastMetalUpdate(t time.Time) *PlanetUpdateOne {
	puo.last_metal_update = &t
	return puo
}

// SetNillableLastMetalUpdate sets the last_metal_update field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableLastMetalUpdate(t *time.Time) *PlanetUpdateOne {
	if t != nil {
		puo.SetLastMetalUpdate(*t)
	}
	return puo
}

// SetOwnerID sets the owner edge to User by id.
func (puo *PlanetUpdateOne) SetOwnerID(id int) *PlanetUpdateOne {
	if puo.owner == nil {
		puo.owner = make(map[int]struct{})
	}
	puo.owner[id] = struct{}{}
	return puo
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableOwnerID(id *int) *PlanetUpdateOne {
	if id != nil {
		puo = puo.SetOwnerID(*id)
	}
	return puo
}

// SetOwner sets the owner edge to User.
func (puo *PlanetUpdateOne) SetOwner(u *User) *PlanetUpdateOne {
	return puo.SetOwnerID(u.ID)
}

// ClearOwner clears the owner edge to User.
func (puo *PlanetUpdateOne) ClearOwner() *PlanetUpdateOne {
	puo.clearedOwner = true
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PlanetUpdateOne) Save(ctx context.Context) (*Planet, error) {
	if puo.updated_at == nil {
		v := planet.UpdateDefaultUpdatedAt()
		puo.updated_at = &v
	}
	if puo.metal_stock != nil {
		if err := planet.MetalStockValidator(*puo.metal_stock); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"metal_stock\": %v", err)
		}
	}
	if puo.metal_mine != nil {
		if err := planet.MetalMineValidator(*puo.metal_mine); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"metal_mine\": %v", err)
		}
	}
	if len(puo.owner) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"owner\"")
	}
	return puo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlanetUpdateOne) SaveX(ctx context.Context) *Planet {
	pl, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pl
}

// Exec executes the query on the entity.
func (puo *PlanetUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlanetUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlanetUpdateOne) sqlSave(ctx context.Context) (pl *Planet, err error) {
	var (
		builder  = sql.Dialect(puo.driver.Dialect())
		selector = builder.Select(planet.Columns...).From(builder.Table(planet.Table))
	)
	planet.ID(puo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = puo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		pl = &Planet{config: puo.config}
		if err := pl.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into Planet: %v", err)
		}
		id = pl.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("Planet with id: %v", puo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one Planet with the same id: %v", puo.id)
	}

	tx, err := puo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		updater = builder.Update(planet.Table)
	)
	updater = updater.Where(sql.InInts(planet.FieldID, ids...))
	if value := puo.updated_at; value != nil {
		updater.Set(planet.FieldUpdatedAt, *value)
		pl.UpdatedAt = *value
	}
	if value := puo.metal_stock; value != nil {
		updater.Set(planet.FieldMetalStock, *value)
		pl.MetalStock = *value
	}
	if value := puo.addmetal_stock; value != nil {
		updater.Add(planet.FieldMetalStock, *value)
		pl.MetalStock += *value
	}
	if value := puo.metal_mine; value != nil {
		updater.Set(planet.FieldMetalMine, *value)
		pl.MetalMine = *value
	}
	if value := puo.addmetal_mine; value != nil {
		updater.Add(planet.FieldMetalMine, *value)
		pl.MetalMine += *value
	}
	if value := puo.last_metal_update; value != nil {
		updater.Set(planet.FieldLastMetalUpdate, *value)
		pl.LastMetalUpdate = *value
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if puo.clearedOwner {
		query, args := builder.Update(planet.OwnerTable).
			SetNull(planet.OwnerColumn).
			Where(sql.InInts(user.FieldID, ids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(puo.owner) > 0 {
		for eid := range puo.owner {
			query, args := builder.Update(planet.OwnerTable).
				Set(planet.OwnerColumn, eid).
				Where(sql.InInts(planet.FieldID, ids...)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return pl, nil
}
