// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pdeguing/empire-and-foundation/ent/planet"
	"github.com/pdeguing/empire-and-foundation/ent/predicate"
	"github.com/pdeguing/empire-and-foundation/ent/timer"
	"github.com/pdeguing/empire-and-foundation/ent/user"
)

// PlanetUpdate is the builder for updating Planet entities.
type PlanetUpdate struct {
	config
	hooks      []Hook
	mutation   *PlanetMutation
	predicates []predicate.Planet
}

// Where adds a new predicate for the builder.
func (pu *PlanetUpdate) Where(ps ...predicate.Planet) *PlanetUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetUpdatedAt sets the updated_at field.
func (pu *PlanetUpdate) SetUpdatedAt(t time.Time) *PlanetUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetMetal sets the metal field.
func (pu *PlanetUpdate) SetMetal(i int64) *PlanetUpdate {
	pu.mutation.ResetMetal()
	pu.mutation.SetMetal(i)
	return pu
}

// SetNillableMetal sets the metal field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableMetal(i *int64) *PlanetUpdate {
	if i != nil {
		pu.SetMetal(*i)
	}
	return pu
}

// AddMetal adds i to metal.
func (pu *PlanetUpdate) AddMetal(i int64) *PlanetUpdate {
	pu.mutation.AddMetal(i)
	return pu
}

// SetMetalProdLevel sets the metal_prod_level field.
func (pu *PlanetUpdate) SetMetalProdLevel(i int) *PlanetUpdate {
	pu.mutation.ResetMetalProdLevel()
	pu.mutation.SetMetalProdLevel(i)
	return pu
}

// SetNillableMetalProdLevel sets the metal_prod_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableMetalProdLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetMetalProdLevel(*i)
	}
	return pu
}

// AddMetalProdLevel adds i to metal_prod_level.
func (pu *PlanetUpdate) AddMetalProdLevel(i int) *PlanetUpdate {
	pu.mutation.AddMetalProdLevel(i)
	return pu
}

// SetMetalStorageLevel sets the metal_storage_level field.
func (pu *PlanetUpdate) SetMetalStorageLevel(i int) *PlanetUpdate {
	pu.mutation.ResetMetalStorageLevel()
	pu.mutation.SetMetalStorageLevel(i)
	return pu
}

// SetNillableMetalStorageLevel sets the metal_storage_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableMetalStorageLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetMetalStorageLevel(*i)
	}
	return pu
}

// AddMetalStorageLevel adds i to metal_storage_level.
func (pu *PlanetUpdate) AddMetalStorageLevel(i int) *PlanetUpdate {
	pu.mutation.AddMetalStorageLevel(i)
	return pu
}

// SetHydrogen sets the hydrogen field.
func (pu *PlanetUpdate) SetHydrogen(i int64) *PlanetUpdate {
	pu.mutation.ResetHydrogen()
	pu.mutation.SetHydrogen(i)
	return pu
}

// SetNillableHydrogen sets the hydrogen field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableHydrogen(i *int64) *PlanetUpdate {
	if i != nil {
		pu.SetHydrogen(*i)
	}
	return pu
}

// AddHydrogen adds i to hydrogen.
func (pu *PlanetUpdate) AddHydrogen(i int64) *PlanetUpdate {
	pu.mutation.AddHydrogen(i)
	return pu
}

// SetHydrogenProdLevel sets the hydrogen_prod_level field.
func (pu *PlanetUpdate) SetHydrogenProdLevel(i int) *PlanetUpdate {
	pu.mutation.ResetHydrogenProdLevel()
	pu.mutation.SetHydrogenProdLevel(i)
	return pu
}

// SetNillableHydrogenProdLevel sets the hydrogen_prod_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableHydrogenProdLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetHydrogenProdLevel(*i)
	}
	return pu
}

// AddHydrogenProdLevel adds i to hydrogen_prod_level.
func (pu *PlanetUpdate) AddHydrogenProdLevel(i int) *PlanetUpdate {
	pu.mutation.AddHydrogenProdLevel(i)
	return pu
}

// SetHydrogenStorageLevel sets the hydrogen_storage_level field.
func (pu *PlanetUpdate) SetHydrogenStorageLevel(i int) *PlanetUpdate {
	pu.mutation.ResetHydrogenStorageLevel()
	pu.mutation.SetHydrogenStorageLevel(i)
	return pu
}

// SetNillableHydrogenStorageLevel sets the hydrogen_storage_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableHydrogenStorageLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetHydrogenStorageLevel(*i)
	}
	return pu
}

// AddHydrogenStorageLevel adds i to hydrogen_storage_level.
func (pu *PlanetUpdate) AddHydrogenStorageLevel(i int) *PlanetUpdate {
	pu.mutation.AddHydrogenStorageLevel(i)
	return pu
}

// SetSilica sets the silica field.
func (pu *PlanetUpdate) SetSilica(i int64) *PlanetUpdate {
	pu.mutation.ResetSilica()
	pu.mutation.SetSilica(i)
	return pu
}

// SetNillableSilica sets the silica field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableSilica(i *int64) *PlanetUpdate {
	if i != nil {
		pu.SetSilica(*i)
	}
	return pu
}

// AddSilica adds i to silica.
func (pu *PlanetUpdate) AddSilica(i int64) *PlanetUpdate {
	pu.mutation.AddSilica(i)
	return pu
}

// SetSilicaProdLevel sets the silica_prod_level field.
func (pu *PlanetUpdate) SetSilicaProdLevel(i int) *PlanetUpdate {
	pu.mutation.ResetSilicaProdLevel()
	pu.mutation.SetSilicaProdLevel(i)
	return pu
}

// SetNillableSilicaProdLevel sets the silica_prod_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableSilicaProdLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetSilicaProdLevel(*i)
	}
	return pu
}

// AddSilicaProdLevel adds i to silica_prod_level.
func (pu *PlanetUpdate) AddSilicaProdLevel(i int) *PlanetUpdate {
	pu.mutation.AddSilicaProdLevel(i)
	return pu
}

// SetSilicaStorageLevel sets the silica_storage_level field.
func (pu *PlanetUpdate) SetSilicaStorageLevel(i int) *PlanetUpdate {
	pu.mutation.ResetSilicaStorageLevel()
	pu.mutation.SetSilicaStorageLevel(i)
	return pu
}

// SetNillableSilicaStorageLevel sets the silica_storage_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableSilicaStorageLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetSilicaStorageLevel(*i)
	}
	return pu
}

// AddSilicaStorageLevel adds i to silica_storage_level.
func (pu *PlanetUpdate) AddSilicaStorageLevel(i int) *PlanetUpdate {
	pu.mutation.AddSilicaStorageLevel(i)
	return pu
}

// SetPopulation sets the population field.
func (pu *PlanetUpdate) SetPopulation(i int64) *PlanetUpdate {
	pu.mutation.ResetPopulation()
	pu.mutation.SetPopulation(i)
	return pu
}

// SetNillablePopulation sets the population field if the given value is not nil.
func (pu *PlanetUpdate) SetNillablePopulation(i *int64) *PlanetUpdate {
	if i != nil {
		pu.SetPopulation(*i)
	}
	return pu
}

// AddPopulation adds i to population.
func (pu *PlanetUpdate) AddPopulation(i int64) *PlanetUpdate {
	pu.mutation.AddPopulation(i)
	return pu
}

// SetPopulationProdLevel sets the population_prod_level field.
func (pu *PlanetUpdate) SetPopulationProdLevel(i int) *PlanetUpdate {
	pu.mutation.ResetPopulationProdLevel()
	pu.mutation.SetPopulationProdLevel(i)
	return pu
}

// SetNillablePopulationProdLevel sets the population_prod_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillablePopulationProdLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetPopulationProdLevel(*i)
	}
	return pu
}

// AddPopulationProdLevel adds i to population_prod_level.
func (pu *PlanetUpdate) AddPopulationProdLevel(i int) *PlanetUpdate {
	pu.mutation.AddPopulationProdLevel(i)
	return pu
}

// SetPopulationStorageLevel sets the population_storage_level field.
func (pu *PlanetUpdate) SetPopulationStorageLevel(i int) *PlanetUpdate {
	pu.mutation.ResetPopulationStorageLevel()
	pu.mutation.SetPopulationStorageLevel(i)
	return pu
}

// SetNillablePopulationStorageLevel sets the population_storage_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillablePopulationStorageLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetPopulationStorageLevel(*i)
	}
	return pu
}

// AddPopulationStorageLevel adds i to population_storage_level.
func (pu *PlanetUpdate) AddPopulationStorageLevel(i int) *PlanetUpdate {
	pu.mutation.AddPopulationStorageLevel(i)
	return pu
}

// SetSolarProdLevel sets the solar_prod_level field.
func (pu *PlanetUpdate) SetSolarProdLevel(i int) *PlanetUpdate {
	pu.mutation.ResetSolarProdLevel()
	pu.mutation.SetSolarProdLevel(i)
	return pu
}

// SetNillableSolarProdLevel sets the solar_prod_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableSolarProdLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetSolarProdLevel(*i)
	}
	return pu
}

// AddSolarProdLevel adds i to solar_prod_level.
func (pu *PlanetUpdate) AddSolarProdLevel(i int) *PlanetUpdate {
	pu.mutation.AddSolarProdLevel(i)
	return pu
}

// SetShipFactoryLevel sets the ship_factory_level field.
func (pu *PlanetUpdate) SetShipFactoryLevel(i int) *PlanetUpdate {
	pu.mutation.ResetShipFactoryLevel()
	pu.mutation.SetShipFactoryLevel(i)
	return pu
}

// SetNillableShipFactoryLevel sets the ship_factory_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableShipFactoryLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetShipFactoryLevel(*i)
	}
	return pu
}

// AddShipFactoryLevel adds i to ship_factory_level.
func (pu *PlanetUpdate) AddShipFactoryLevel(i int) *PlanetUpdate {
	pu.mutation.AddShipFactoryLevel(i)
	return pu
}

// SetResearchCenterLevel sets the research_center_level field.
func (pu *PlanetUpdate) SetResearchCenterLevel(i int) *PlanetUpdate {
	pu.mutation.ResetResearchCenterLevel()
	pu.mutation.SetResearchCenterLevel(i)
	return pu
}

// SetNillableResearchCenterLevel sets the research_center_level field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableResearchCenterLevel(i *int) *PlanetUpdate {
	if i != nil {
		pu.SetResearchCenterLevel(*i)
	}
	return pu
}

// AddResearchCenterLevel adds i to research_center_level.
func (pu *PlanetUpdate) AddResearchCenterLevel(i int) *PlanetUpdate {
	pu.mutation.AddResearchCenterLevel(i)
	return pu
}

// SetName sets the name field.
func (pu *PlanetUpdate) SetName(s string) *PlanetUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the name field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableName(s *string) *PlanetUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetPlanetSkin sets the planet_skin field.
func (pu *PlanetUpdate) SetPlanetSkin(s string) *PlanetUpdate {
	pu.mutation.SetPlanetSkin(s)
	return pu
}

// SetLastResourceUpdate sets the last_resource_update field.
func (pu *PlanetUpdate) SetLastResourceUpdate(t time.Time) *PlanetUpdate {
	pu.mutation.SetLastResourceUpdate(t)
	return pu
}

// SetNillableLastResourceUpdate sets the last_resource_update field if the given value is not nil.
func (pu *PlanetUpdate) SetNillableLastResourceUpdate(t *time.Time) *PlanetUpdate {
	if t != nil {
		pu.SetLastResourceUpdate(*t)
	}
	return pu
}

// SetOwnerID sets the owner edge to User by id.
func (pu *PlanetUpdate) SetOwnerID(id int) *PlanetUpdate {
	pu.mutation.SetOwnerID(id)
	return pu
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (pu *PlanetUpdate) SetNillableOwnerID(id *int) *PlanetUpdate {
	if id != nil {
		pu = pu.SetOwnerID(*id)
	}
	return pu
}

// SetOwner sets the owner edge to User.
func (pu *PlanetUpdate) SetOwner(u *User) *PlanetUpdate {
	return pu.SetOwnerID(u.ID)
}

// AddTimerIDs adds the timers edge to Timer by ids.
func (pu *PlanetUpdate) AddTimerIDs(ids ...int) *PlanetUpdate {
	pu.mutation.AddTimerIDs(ids...)
	return pu
}

// AddTimers adds the timers edges to Timer.
func (pu *PlanetUpdate) AddTimers(t ...*Timer) *PlanetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTimerIDs(ids...)
}

// ClearOwner clears the owner edge to User.
func (pu *PlanetUpdate) ClearOwner() *PlanetUpdate {
	pu.mutation.ClearOwner()
	return pu
}

// RemoveTimerIDs removes the timers edge to Timer by ids.
func (pu *PlanetUpdate) RemoveTimerIDs(ids ...int) *PlanetUpdate {
	pu.mutation.RemoveTimerIDs(ids...)
	return pu
}

// RemoveTimers removes timers edges to Timer.
func (pu *PlanetUpdate) RemoveTimers(t ...*Timer) *PlanetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTimerIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PlanetUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := planet.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	if v, ok := pu.mutation.Metal(); ok {
		if err := planet.MetalValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"metal\": %v", err)
		}
	}
	if v, ok := pu.mutation.MetalProdLevel(); ok {
		if err := planet.MetalProdLevelValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"metal_prod_level\": %v", err)
		}
	}
	if v, ok := pu.mutation.MetalStorageLevel(); ok {
		if err := planet.MetalStorageLevelValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"metal_storage_level\": %v", err)
		}
	}
	if v, ok := pu.mutation.Hydrogen(); ok {
		if err := planet.HydrogenValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"hydrogen\": %v", err)
		}
	}
	if v, ok := pu.mutation.HydrogenProdLevel(); ok {
		if err := planet.HydrogenProdLevelValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"hydrogen_prod_level\": %v", err)
		}
	}
	if v, ok := pu.mutation.HydrogenStorageLevel(); ok {
		if err := planet.HydrogenStorageLevelValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"hydrogen_storage_level\": %v", err)
		}
	}
	if v, ok := pu.mutation.Silica(); ok {
		if err := planet.SilicaValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"silica\": %v", err)
		}
	}
	if v, ok := pu.mutation.SilicaProdLevel(); ok {
		if err := planet.SilicaProdLevelValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"silica_prod_level\": %v", err)
		}
	}
	if v, ok := pu.mutation.SilicaStorageLevel(); ok {
		if err := planet.SilicaStorageLevelValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"silica_storage_level\": %v", err)
		}
	}
	if v, ok := pu.mutation.Population(); ok {
		if err := planet.PopulationValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"population\": %v", err)
		}
	}
	if v, ok := pu.mutation.PopulationProdLevel(); ok {
		if err := planet.PopulationProdLevelValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"population_prod_level\": %v", err)
		}
	}
	if v, ok := pu.mutation.PopulationStorageLevel(); ok {
		if err := planet.PopulationStorageLevelValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"population_storage_level\": %v", err)
		}
	}
	if v, ok := pu.mutation.SolarProdLevel(); ok {
		if err := planet.SolarProdLevelValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"solar_prod_level\": %v", err)
		}
	}
	if v, ok := pu.mutation.ShipFactoryLevel(); ok {
		if err := planet.ShipFactoryLevelValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"ship_factory_level\": %v", err)
		}
	}
	if v, ok := pu.mutation.ResearchCenterLevel(); ok {
		if err := planet.ResearchCenterLevelValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"research_center_level\": %v", err)
		}
	}

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlanetUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlanetUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlanetUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlanetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   planet.Table,
			Columns: planet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: planet.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: planet.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.Metal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldMetal,
		})
	}
	if value, ok := pu.mutation.AddedMetal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldMetal,
		})
	}
	if value, ok := pu.mutation.MetalProdLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldMetalProdLevel,
		})
	}
	if value, ok := pu.mutation.AddedMetalProdLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldMetalProdLevel,
		})
	}
	if value, ok := pu.mutation.MetalStorageLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldMetalStorageLevel,
		})
	}
	if value, ok := pu.mutation.AddedMetalStorageLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldMetalStorageLevel,
		})
	}
	if value, ok := pu.mutation.Hydrogen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldHydrogen,
		})
	}
	if value, ok := pu.mutation.AddedHydrogen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldHydrogen,
		})
	}
	if value, ok := pu.mutation.HydrogenProdLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldHydrogenProdLevel,
		})
	}
	if value, ok := pu.mutation.AddedHydrogenProdLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldHydrogenProdLevel,
		})
	}
	if value, ok := pu.mutation.HydrogenStorageLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldHydrogenStorageLevel,
		})
	}
	if value, ok := pu.mutation.AddedHydrogenStorageLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldHydrogenStorageLevel,
		})
	}
	if value, ok := pu.mutation.Silica(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldSilica,
		})
	}
	if value, ok := pu.mutation.AddedSilica(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldSilica,
		})
	}
	if value, ok := pu.mutation.SilicaProdLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSilicaProdLevel,
		})
	}
	if value, ok := pu.mutation.AddedSilicaProdLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSilicaProdLevel,
		})
	}
	if value, ok := pu.mutation.SilicaStorageLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSilicaStorageLevel,
		})
	}
	if value, ok := pu.mutation.AddedSilicaStorageLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSilicaStorageLevel,
		})
	}
	if value, ok := pu.mutation.Population(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldPopulation,
		})
	}
	if value, ok := pu.mutation.AddedPopulation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldPopulation,
		})
	}
	if value, ok := pu.mutation.PopulationProdLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldPopulationProdLevel,
		})
	}
	if value, ok := pu.mutation.AddedPopulationProdLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldPopulationProdLevel,
		})
	}
	if value, ok := pu.mutation.PopulationStorageLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldPopulationStorageLevel,
		})
	}
	if value, ok := pu.mutation.AddedPopulationStorageLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldPopulationStorageLevel,
		})
	}
	if value, ok := pu.mutation.SolarProdLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSolarProdLevel,
		})
	}
	if value, ok := pu.mutation.AddedSolarProdLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSolarProdLevel,
		})
	}
	if value, ok := pu.mutation.ShipFactoryLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldShipFactoryLevel,
		})
	}
	if value, ok := pu.mutation.AddedShipFactoryLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldShipFactoryLevel,
		})
	}
	if value, ok := pu.mutation.ResearchCenterLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldResearchCenterLevel,
		})
	}
	if value, ok := pu.mutation.AddedResearchCenterLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldResearchCenterLevel,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldName,
		})
	}
	if value, ok := pu.mutation.PlanetSkin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldPlanetSkin,
		})
	}
	if value, ok := pu.mutation.LastResourceUpdate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: planet.FieldLastResourceUpdate,
		})
	}
	if pu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planet.OwnerTable,
			Columns: []string{planet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planet.OwnerTable,
			Columns: []string{planet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := pu.mutation.RemovedTimersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   planet.TimersTable,
			Columns: []string{planet.TimersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: timer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TimersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   planet.TimersTable,
			Columns: []string{planet.TimersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: timer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{planet.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PlanetUpdateOne is the builder for updating a single Planet entity.
type PlanetUpdateOne struct {
	config
	hooks    []Hook
	mutation *PlanetMutation
}

// SetUpdatedAt sets the updated_at field.
func (puo *PlanetUpdateOne) SetUpdatedAt(t time.Time) *PlanetUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetMetal sets the metal field.
func (puo *PlanetUpdateOne) SetMetal(i int64) *PlanetUpdateOne {
	puo.mutation.ResetMetal()
	puo.mutation.SetMetal(i)
	return puo
}

// SetNillableMetal sets the metal field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableMetal(i *int64) *PlanetUpdateOne {
	if i != nil {
		puo.SetMetal(*i)
	}
	return puo
}

// AddMetal adds i to metal.
func (puo *PlanetUpdateOne) AddMetal(i int64) *PlanetUpdateOne {
	puo.mutation.AddMetal(i)
	return puo
}

// SetMetalProdLevel sets the metal_prod_level field.
func (puo *PlanetUpdateOne) SetMetalProdLevel(i int) *PlanetUpdateOne {
	puo.mutation.ResetMetalProdLevel()
	puo.mutation.SetMetalProdLevel(i)
	return puo
}

// SetNillableMetalProdLevel sets the metal_prod_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableMetalProdLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetMetalProdLevel(*i)
	}
	return puo
}

// AddMetalProdLevel adds i to metal_prod_level.
func (puo *PlanetUpdateOne) AddMetalProdLevel(i int) *PlanetUpdateOne {
	puo.mutation.AddMetalProdLevel(i)
	return puo
}

// SetMetalStorageLevel sets the metal_storage_level field.
func (puo *PlanetUpdateOne) SetMetalStorageLevel(i int) *PlanetUpdateOne {
	puo.mutation.ResetMetalStorageLevel()
	puo.mutation.SetMetalStorageLevel(i)
	return puo
}

// SetNillableMetalStorageLevel sets the metal_storage_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableMetalStorageLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetMetalStorageLevel(*i)
	}
	return puo
}

// AddMetalStorageLevel adds i to metal_storage_level.
func (puo *PlanetUpdateOne) AddMetalStorageLevel(i int) *PlanetUpdateOne {
	puo.mutation.AddMetalStorageLevel(i)
	return puo
}

// SetHydrogen sets the hydrogen field.
func (puo *PlanetUpdateOne) SetHydrogen(i int64) *PlanetUpdateOne {
	puo.mutation.ResetHydrogen()
	puo.mutation.SetHydrogen(i)
	return puo
}

// SetNillableHydrogen sets the hydrogen field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableHydrogen(i *int64) *PlanetUpdateOne {
	if i != nil {
		puo.SetHydrogen(*i)
	}
	return puo
}

// AddHydrogen adds i to hydrogen.
func (puo *PlanetUpdateOne) AddHydrogen(i int64) *PlanetUpdateOne {
	puo.mutation.AddHydrogen(i)
	return puo
}

// SetHydrogenProdLevel sets the hydrogen_prod_level field.
func (puo *PlanetUpdateOne) SetHydrogenProdLevel(i int) *PlanetUpdateOne {
	puo.mutation.ResetHydrogenProdLevel()
	puo.mutation.SetHydrogenProdLevel(i)
	return puo
}

// SetNillableHydrogenProdLevel sets the hydrogen_prod_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableHydrogenProdLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetHydrogenProdLevel(*i)
	}
	return puo
}

// AddHydrogenProdLevel adds i to hydrogen_prod_level.
func (puo *PlanetUpdateOne) AddHydrogenProdLevel(i int) *PlanetUpdateOne {
	puo.mutation.AddHydrogenProdLevel(i)
	return puo
}

// SetHydrogenStorageLevel sets the hydrogen_storage_level field.
func (puo *PlanetUpdateOne) SetHydrogenStorageLevel(i int) *PlanetUpdateOne {
	puo.mutation.ResetHydrogenStorageLevel()
	puo.mutation.SetHydrogenStorageLevel(i)
	return puo
}

// SetNillableHydrogenStorageLevel sets the hydrogen_storage_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableHydrogenStorageLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetHydrogenStorageLevel(*i)
	}
	return puo
}

// AddHydrogenStorageLevel adds i to hydrogen_storage_level.
func (puo *PlanetUpdateOne) AddHydrogenStorageLevel(i int) *PlanetUpdateOne {
	puo.mutation.AddHydrogenStorageLevel(i)
	return puo
}

// SetSilica sets the silica field.
func (puo *PlanetUpdateOne) SetSilica(i int64) *PlanetUpdateOne {
	puo.mutation.ResetSilica()
	puo.mutation.SetSilica(i)
	return puo
}

// SetNillableSilica sets the silica field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableSilica(i *int64) *PlanetUpdateOne {
	if i != nil {
		puo.SetSilica(*i)
	}
	return puo
}

// AddSilica adds i to silica.
func (puo *PlanetUpdateOne) AddSilica(i int64) *PlanetUpdateOne {
	puo.mutation.AddSilica(i)
	return puo
}

// SetSilicaProdLevel sets the silica_prod_level field.
func (puo *PlanetUpdateOne) SetSilicaProdLevel(i int) *PlanetUpdateOne {
	puo.mutation.ResetSilicaProdLevel()
	puo.mutation.SetSilicaProdLevel(i)
	return puo
}

// SetNillableSilicaProdLevel sets the silica_prod_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableSilicaProdLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetSilicaProdLevel(*i)
	}
	return puo
}

// AddSilicaProdLevel adds i to silica_prod_level.
func (puo *PlanetUpdateOne) AddSilicaProdLevel(i int) *PlanetUpdateOne {
	puo.mutation.AddSilicaProdLevel(i)
	return puo
}

// SetSilicaStorageLevel sets the silica_storage_level field.
func (puo *PlanetUpdateOne) SetSilicaStorageLevel(i int) *PlanetUpdateOne {
	puo.mutation.ResetSilicaStorageLevel()
	puo.mutation.SetSilicaStorageLevel(i)
	return puo
}

// SetNillableSilicaStorageLevel sets the silica_storage_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableSilicaStorageLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetSilicaStorageLevel(*i)
	}
	return puo
}

// AddSilicaStorageLevel adds i to silica_storage_level.
func (puo *PlanetUpdateOne) AddSilicaStorageLevel(i int) *PlanetUpdateOne {
	puo.mutation.AddSilicaStorageLevel(i)
	return puo
}

// SetPopulation sets the population field.
func (puo *PlanetUpdateOne) SetPopulation(i int64) *PlanetUpdateOne {
	puo.mutation.ResetPopulation()
	puo.mutation.SetPopulation(i)
	return puo
}

// SetNillablePopulation sets the population field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillablePopulation(i *int64) *PlanetUpdateOne {
	if i != nil {
		puo.SetPopulation(*i)
	}
	return puo
}

// AddPopulation adds i to population.
func (puo *PlanetUpdateOne) AddPopulation(i int64) *PlanetUpdateOne {
	puo.mutation.AddPopulation(i)
	return puo
}

// SetPopulationProdLevel sets the population_prod_level field.
func (puo *PlanetUpdateOne) SetPopulationProdLevel(i int) *PlanetUpdateOne {
	puo.mutation.ResetPopulationProdLevel()
	puo.mutation.SetPopulationProdLevel(i)
	return puo
}

// SetNillablePopulationProdLevel sets the population_prod_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillablePopulationProdLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetPopulationProdLevel(*i)
	}
	return puo
}

// AddPopulationProdLevel adds i to population_prod_level.
func (puo *PlanetUpdateOne) AddPopulationProdLevel(i int) *PlanetUpdateOne {
	puo.mutation.AddPopulationProdLevel(i)
	return puo
}

// SetPopulationStorageLevel sets the population_storage_level field.
func (puo *PlanetUpdateOne) SetPopulationStorageLevel(i int) *PlanetUpdateOne {
	puo.mutation.ResetPopulationStorageLevel()
	puo.mutation.SetPopulationStorageLevel(i)
	return puo
}

// SetNillablePopulationStorageLevel sets the population_storage_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillablePopulationStorageLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetPopulationStorageLevel(*i)
	}
	return puo
}

// AddPopulationStorageLevel adds i to population_storage_level.
func (puo *PlanetUpdateOne) AddPopulationStorageLevel(i int) *PlanetUpdateOne {
	puo.mutation.AddPopulationStorageLevel(i)
	return puo
}

// SetSolarProdLevel sets the solar_prod_level field.
func (puo *PlanetUpdateOne) SetSolarProdLevel(i int) *PlanetUpdateOne {
	puo.mutation.ResetSolarProdLevel()
	puo.mutation.SetSolarProdLevel(i)
	return puo
}

// SetNillableSolarProdLevel sets the solar_prod_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableSolarProdLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetSolarProdLevel(*i)
	}
	return puo
}

// AddSolarProdLevel adds i to solar_prod_level.
func (puo *PlanetUpdateOne) AddSolarProdLevel(i int) *PlanetUpdateOne {
	puo.mutation.AddSolarProdLevel(i)
	return puo
}

// SetShipFactoryLevel sets the ship_factory_level field.
func (puo *PlanetUpdateOne) SetShipFactoryLevel(i int) *PlanetUpdateOne {
	puo.mutation.ResetShipFactoryLevel()
	puo.mutation.SetShipFactoryLevel(i)
	return puo
}

// SetNillableShipFactoryLevel sets the ship_factory_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableShipFactoryLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetShipFactoryLevel(*i)
	}
	return puo
}

// AddShipFactoryLevel adds i to ship_factory_level.
func (puo *PlanetUpdateOne) AddShipFactoryLevel(i int) *PlanetUpdateOne {
	puo.mutation.AddShipFactoryLevel(i)
	return puo
}

// SetResearchCenterLevel sets the research_center_level field.
func (puo *PlanetUpdateOne) SetResearchCenterLevel(i int) *PlanetUpdateOne {
	puo.mutation.ResetResearchCenterLevel()
	puo.mutation.SetResearchCenterLevel(i)
	return puo
}

// SetNillableResearchCenterLevel sets the research_center_level field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableResearchCenterLevel(i *int) *PlanetUpdateOne {
	if i != nil {
		puo.SetResearchCenterLevel(*i)
	}
	return puo
}

// AddResearchCenterLevel adds i to research_center_level.
func (puo *PlanetUpdateOne) AddResearchCenterLevel(i int) *PlanetUpdateOne {
	puo.mutation.AddResearchCenterLevel(i)
	return puo
}

// SetName sets the name field.
func (puo *PlanetUpdateOne) SetName(s string) *PlanetUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the name field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableName(s *string) *PlanetUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetPlanetSkin sets the planet_skin field.
func (puo *PlanetUpdateOne) SetPlanetSkin(s string) *PlanetUpdateOne {
	puo.mutation.SetPlanetSkin(s)
	return puo
}

// SetLastResourceUpdate sets the last_resource_update field.
func (puo *PlanetUpdateOne) SetLastResourceUpdate(t time.Time) *PlanetUpdateOne {
	puo.mutation.SetLastResourceUpdate(t)
	return puo
}

// SetNillableLastResourceUpdate sets the last_resource_update field if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableLastResourceUpdate(t *time.Time) *PlanetUpdateOne {
	if t != nil {
		puo.SetLastResourceUpdate(*t)
	}
	return puo
}

// SetOwnerID sets the owner edge to User by id.
func (puo *PlanetUpdateOne) SetOwnerID(id int) *PlanetUpdateOne {
	puo.mutation.SetOwnerID(id)
	return puo
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (puo *PlanetUpdateOne) SetNillableOwnerID(id *int) *PlanetUpdateOne {
	if id != nil {
		puo = puo.SetOwnerID(*id)
	}
	return puo
}

// SetOwner sets the owner edge to User.
func (puo *PlanetUpdateOne) SetOwner(u *User) *PlanetUpdateOne {
	return puo.SetOwnerID(u.ID)
}

// AddTimerIDs adds the timers edge to Timer by ids.
func (puo *PlanetUpdateOne) AddTimerIDs(ids ...int) *PlanetUpdateOne {
	puo.mutation.AddTimerIDs(ids...)
	return puo
}

// AddTimers adds the timers edges to Timer.
func (puo *PlanetUpdateOne) AddTimers(t ...*Timer) *PlanetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTimerIDs(ids...)
}

// ClearOwner clears the owner edge to User.
func (puo *PlanetUpdateOne) ClearOwner() *PlanetUpdateOne {
	puo.mutation.ClearOwner()
	return puo
}

// RemoveTimerIDs removes the timers edge to Timer by ids.
func (puo *PlanetUpdateOne) RemoveTimerIDs(ids ...int) *PlanetUpdateOne {
	puo.mutation.RemoveTimerIDs(ids...)
	return puo
}

// RemoveTimers removes timers edges to Timer.
func (puo *PlanetUpdateOne) RemoveTimers(t ...*Timer) *PlanetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTimerIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *PlanetUpdateOne) Save(ctx context.Context) (*Planet, error) {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := planet.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	if v, ok := puo.mutation.Metal(); ok {
		if err := planet.MetalValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"metal\": %v", err)
		}
	}
	if v, ok := puo.mutation.MetalProdLevel(); ok {
		if err := planet.MetalProdLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"metal_prod_level\": %v", err)
		}
	}
	if v, ok := puo.mutation.MetalStorageLevel(); ok {
		if err := planet.MetalStorageLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"metal_storage_level\": %v", err)
		}
	}
	if v, ok := puo.mutation.Hydrogen(); ok {
		if err := planet.HydrogenValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"hydrogen\": %v", err)
		}
	}
	if v, ok := puo.mutation.HydrogenProdLevel(); ok {
		if err := planet.HydrogenProdLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"hydrogen_prod_level\": %v", err)
		}
	}
	if v, ok := puo.mutation.HydrogenStorageLevel(); ok {
		if err := planet.HydrogenStorageLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"hydrogen_storage_level\": %v", err)
		}
	}
	if v, ok := puo.mutation.Silica(); ok {
		if err := planet.SilicaValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"silica\": %v", err)
		}
	}
	if v, ok := puo.mutation.SilicaProdLevel(); ok {
		if err := planet.SilicaProdLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"silica_prod_level\": %v", err)
		}
	}
	if v, ok := puo.mutation.SilicaStorageLevel(); ok {
		if err := planet.SilicaStorageLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"silica_storage_level\": %v", err)
		}
	}
	if v, ok := puo.mutation.Population(); ok {
		if err := planet.PopulationValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"population\": %v", err)
		}
	}
	if v, ok := puo.mutation.PopulationProdLevel(); ok {
		if err := planet.PopulationProdLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"population_prod_level\": %v", err)
		}
	}
	if v, ok := puo.mutation.PopulationStorageLevel(); ok {
		if err := planet.PopulationStorageLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"population_storage_level\": %v", err)
		}
	}
	if v, ok := puo.mutation.SolarProdLevel(); ok {
		if err := planet.SolarProdLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"solar_prod_level\": %v", err)
		}
	}
	if v, ok := puo.mutation.ShipFactoryLevel(); ok {
		if err := planet.ShipFactoryLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"ship_factory_level\": %v", err)
		}
	}
	if v, ok := puo.mutation.ResearchCenterLevel(); ok {
		if err := planet.ResearchCenterLevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"research_center_level\": %v", err)
		}
	}

	var (
		err  error
		node *Planet
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlanetUpdateOne) SaveX(ctx context.Context) *Planet {
	pl, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pl
}

// Exec executes the query on the entity.
func (puo *PlanetUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlanetUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlanetUpdateOne) sqlSave(ctx context.Context) (pl *Planet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   planet.Table,
			Columns: planet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: planet.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Planet.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: planet.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.Metal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldMetal,
		})
	}
	if value, ok := puo.mutation.AddedMetal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldMetal,
		})
	}
	if value, ok := puo.mutation.MetalProdLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldMetalProdLevel,
		})
	}
	if value, ok := puo.mutation.AddedMetalProdLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldMetalProdLevel,
		})
	}
	if value, ok := puo.mutation.MetalStorageLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldMetalStorageLevel,
		})
	}
	if value, ok := puo.mutation.AddedMetalStorageLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldMetalStorageLevel,
		})
	}
	if value, ok := puo.mutation.Hydrogen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldHydrogen,
		})
	}
	if value, ok := puo.mutation.AddedHydrogen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldHydrogen,
		})
	}
	if value, ok := puo.mutation.HydrogenProdLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldHydrogenProdLevel,
		})
	}
	if value, ok := puo.mutation.AddedHydrogenProdLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldHydrogenProdLevel,
		})
	}
	if value, ok := puo.mutation.HydrogenStorageLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldHydrogenStorageLevel,
		})
	}
	if value, ok := puo.mutation.AddedHydrogenStorageLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldHydrogenStorageLevel,
		})
	}
	if value, ok := puo.mutation.Silica(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldSilica,
		})
	}
	if value, ok := puo.mutation.AddedSilica(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldSilica,
		})
	}
	if value, ok := puo.mutation.SilicaProdLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSilicaProdLevel,
		})
	}
	if value, ok := puo.mutation.AddedSilicaProdLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSilicaProdLevel,
		})
	}
	if value, ok := puo.mutation.SilicaStorageLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSilicaStorageLevel,
		})
	}
	if value, ok := puo.mutation.AddedSilicaStorageLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSilicaStorageLevel,
		})
	}
	if value, ok := puo.mutation.Population(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldPopulation,
		})
	}
	if value, ok := puo.mutation.AddedPopulation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: planet.FieldPopulation,
		})
	}
	if value, ok := puo.mutation.PopulationProdLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldPopulationProdLevel,
		})
	}
	if value, ok := puo.mutation.AddedPopulationProdLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldPopulationProdLevel,
		})
	}
	if value, ok := puo.mutation.PopulationStorageLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldPopulationStorageLevel,
		})
	}
	if value, ok := puo.mutation.AddedPopulationStorageLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldPopulationStorageLevel,
		})
	}
	if value, ok := puo.mutation.SolarProdLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSolarProdLevel,
		})
	}
	if value, ok := puo.mutation.AddedSolarProdLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldSolarProdLevel,
		})
	}
	if value, ok := puo.mutation.ShipFactoryLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldShipFactoryLevel,
		})
	}
	if value, ok := puo.mutation.AddedShipFactoryLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldShipFactoryLevel,
		})
	}
	if value, ok := puo.mutation.ResearchCenterLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldResearchCenterLevel,
		})
	}
	if value, ok := puo.mutation.AddedResearchCenterLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: planet.FieldResearchCenterLevel,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldName,
		})
	}
	if value, ok := puo.mutation.PlanetSkin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planet.FieldPlanetSkin,
		})
	}
	if value, ok := puo.mutation.LastResourceUpdate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: planet.FieldLastResourceUpdate,
		})
	}
	if puo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planet.OwnerTable,
			Columns: []string{planet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planet.OwnerTable,
			Columns: []string{planet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := puo.mutation.RemovedTimersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   planet.TimersTable,
			Columns: []string{planet.TimersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: timer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TimersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   planet.TimersTable,
			Columns: []string{planet.TimersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: timer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pl = &Planet{config: puo.config}
	_spec.Assign = pl.assignValues
	_spec.ScanValues = pl.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{planet.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pl, nil
}
